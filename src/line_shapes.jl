#precompute a few numbers
const sqœÄ = ‚àöœÄ
const osqœÄln2 = 1/sqrt(œÄ/log(2.0))
const sqln2 = sqrt(log(2.0))
const c2 = 100.0*ùê°*ùêú/ùê§

#-------------------------------------------------------------------------------
# wavenumber truncation of line shapes

cutline(ŒΩ, ŒΩl, ŒîŒΩcut)::Bool = abs(ŒΩ - ŒΩl) > ŒîŒΩcut ? true : false

function includedlines(ŒΩ::Real,
                       ŒΩl::AbstractVector{<:Real},
                       ŒîŒΩcut::Real)::Vector{Int64}
    findall(x -> !cutline(ŒΩ, x, ŒîŒΩcut), ŒΩl)
end

function includedlines(ŒΩ::AbstractVector{<:Real},
                       ŒΩl::AbstractVector{<:Real},
                       ŒîŒΩcut::Real)::Vector{Int64}
    findall((ŒΩl .> minimum(ŒΩ) - ŒîŒΩcut) .& (ŒΩl .< maximum(ŒΩ) + ŒîŒΩcut))
end

#-------------------------------------------------------------------------------
# Chebyshev polynomial fit for Qref/Q

function chebyQrefQ(T::Real, n::Int64, a::Vector{Float64})::Float64
    #check the temperature range
    @assert TMIN <= T <= TMAX "temperature outside of Qref/Q interpolation range"
    #map T to [-1,1]
    œÑ = 2*(T - TMIN)/(TMAX - TMIN) - 1
    #values of first two chebys at œÑ
    c‚ÇÅ = 1.0
    c‚ÇÇ = œÑ
    #value of expansion after first two terms
    y = a[1] + a[2]*c‚ÇÇ
    for k = 3:n
        #next cheby value
        c‚ÇÉ = 2*œÑ*c‚ÇÇ - c‚ÇÅ
        #contribute to expansion
        y += a[k]*c‚ÇÉ
        #swap values
        c‚ÇÅ = c‚ÇÇ
        c‚ÇÇ = c‚ÇÉ
    end
    #return the inverse, Qref/Q
    return 1.0/y
end

#-------------------------------------------------------------------------------
# special strategy for line profiles from sorted vectors of wavenumbers

function surf!(œÉ::AbstractVector,
               f::F,
               ŒΩ::AbstractVector,
               ŒΩl::AbstractVector,
               ŒîŒΩcut::Real,
               A::Vararg{Vector{Float64},N}) where {F<:Function, N}
    @assert all(diff(ŒΩ) .> 0) "wavenumber vectors must be sorted in ascending order"
    L = length(ŒΩl)
    jstart = 1 #tracking index to avoid searching from beginning every time
    for i = 1:length(ŒΩ)
        #find the first line that isn't cut off
        j = jstart
        while (j <= L) && cutline(ŒΩ[i], ŒΩl[j], ŒîŒΩcut)
            j += 1
        end
        #only proceed if there is a line to include
        if j <= L
            #update the starting index for the search
            jstart = j
            #evaluate line profiles until one gets cut off, then move on
            while (j <= L) && !cutline(ŒΩ[i], ŒΩl[j], ŒîŒΩcut)
                #let block is required for good performance
                args = let k = j
                    ntuple(n->A[n][k], N)
                end
                œÉ[i] += f(ŒΩ[i], ŒΩl[j], args...)
                j += 1
            end
        end
    end
end

#-------------------------------------------------------------------------------
# temperature scaling of line intensity

export scaleintensity

"""
    scaleintensity(S, ŒΩl, Epp, M, I, T)

Compute the [temperature scaling for line intensity](https://hitran.org/docs/definitions-and-units/#mjx-eqn-eqn-intensity-temperature-dependence).

# Arguments
* `S`: spectal line intensity at 296 K [cm``^{-1}``/(molecule``\\cdot``cm``^{-2}``)]
* `ŒΩl`: wavenumber of line [cm``^{-1}``]
* `Epp`: lower-state energy of transition [cm``^{-1}``]
* `M`: [HITRAN molecular identification number](https://hitran.org/docs/molec-meta)
* `I`: [HITRAN local isotopologue number](https://hitran.org/docs/iso-meta/)
* `T`: temperature [K]
"""
function scaleintensity(S, ŒΩl, Epp, M::Int16, I::Int16, T)::Float64
    #arguments to exp
    a = -c2*Epp
    b = -c2*ŒΩl
    #numerator and denominator
    n = exp(a/T)*(1 - exp(b/T))
    d = exp(a/Tref)*(1 - exp(b/Tref))
    #check if there is an approximating function
    if MOLPARAM[M][10][I]
        QrefQ = chebyQrefQ(T, MOLPARAM[M][11][I], MOLPARAM[M][13][I])
    else
        throw("no interpolating polynomial available to compute Qref/Q for isotopologue $I of $(MOLPARAM[M][3]) ($(MOLPARAM[M][2]))")
        #QrefQ = (Tref/T)^1.5
    end
    #shifted line intensity
    S*QrefQ*(n/d)
end

function scaleintensity(sl::SpectralLines, i::Vector{Int64}, T)::Vector{Float64}
    S = view(sl.S, i)
    ŒΩ = view(sl.ŒΩ, i)
    Epp = view(sl.Epp, i)
    I = view(sl.I, i)
    scaleintensity.(S, ŒΩ, Epp, sl.M, I, T)
end

#-------------------------------------------------------------------------------
# doppler broadening

export Œ±doppler, fdoppler, doppler, doppler!

"""
    Œ±doppler(ŒΩl, Œº, T)

Compute doppler (gaussian) broadening coefficient from line wavenumber `ŒΩl` [cm``^{-1}``], gas molar mass `Œº` [kg/mole], and temperature `T` [K].
"""
Œ±doppler(ŒΩl, Œº, T)::Float64 = (ŒΩl/ùêú)*sqrt(2.0*ùêë*T/Œº)

function Œ±doppler(sl::SpectralLines, i::Vector{Int64}, T)::Vector{Float64}
    Œ±doppler.(view(sl.ŒΩ,i), view(sl.Œº,i), T)
end

"""
    fdoppler(ŒΩ, ŒΩl, Œ±)

Evaluate doppler (gaussian) profile

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `Œ±`: doppler (gaussian) broadening coefficient
"""
fdoppler(ŒΩ, ŒΩl, Œ±)::Float64 = exp(-(ŒΩ - ŒΩl)^2/Œ±^2)/(Œ±*sqœÄ)

"""
    doppler(ŒΩ, ŒΩl, S, Œ±)

Evaluate doppler (gaussian) absoption cross-section [cm``^2``/molecule]

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `S`: line absoption intensity [cm``^{-1}``/(molecule``\\cdot``cm``^{-2}``)]
* `Œ±`: doppler (gaussian) broadening coefficient
"""
doppler(ŒΩ, ŒΩl, S, Œ±)::Float64 = S*fdoppler(ŒΩ, ŒΩl, Œ±)

"""
    doppler(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Evaluate a single doppler (gaussian) absoption cross-section [cm``^2``/molecule]. Temperature scaling and doppler profiles are evaluated along the way.

# Arguments
* `ŒΩ`: wavenumber indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function doppler(ŒΩ, sl::SpectralLines, T, P, P‚Çö, ŒîŒΩcut=25.0)::Float64
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    sum(doppler.(ŒΩ, view(sl.ŒΩ,i), S, Œ±))
end

"""
    doppler!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Identical to [`doppler`](@ref), but fills the vector of cross-sections (`œÉ`) in-place.
"""
function doppler!(œÉ::AbstractVector,
                  ŒΩ::AbstractVector,
                  sl::SpectralLines,
                  T,
                  P,
                  P‚Çö,
                  ŒîŒΩcut=25.0)
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    surf!(œÉ, doppler, ŒΩ, view(sl.ŒΩ,i), ŒîŒΩcut, S, Œ±)
end

"""
    doppler(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Compute a vector of doppler (gaussian) absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and doppler profiles are evaluated along the way.

# Arguments
* `ŒΩ`: vector of wavenumbers indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function doppler(ŒΩ::AbstractVector,
                 sl::SpectralLines,
                 T,
                 P,
                 P‚Çö,
                 ŒîŒΩcut=25.0)::Vector{Float64}
    œÉ = zeros(Float64, length(ŒΩ))
    doppler!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut)
    return œÉ
end

#-------------------------------------------------------------------------------
# pressure broadening

export Œ≥lorentz, florentz, lorentz, lorentz!

"""
    Œ≥lorentz(Œ≥a, Œ≥s, na, T, P, P‚Çö)

Compute lorentzian broadening coefficient

# Arguments
* `Œ≥a`: air-broadened half width at half maximum (HWHM) [cm``^{-1}``/atm] at 296 K and 1 atm
* `Œ≥s`: self-broadened half width at half maximum (HWHM) [cm``^{-1}``/atm] at 296 K and 1 atm
* `na`: coefficient of temperature dependence of air-broadened half width
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
"""
function Œ≥lorentz(Œ≥a, Œ≥s, na, T, P, P‚Çö)::Float64
    ((Tref/T)^na)*(Œ≥a*(P - P‚Çö) + Œ≥s*P‚Çö)/ùêÄ
end

function Œ≥lorentz(sl::SpectralLines, i::Vector{Int64}, T, P, P‚Çö)::Vector{Float64}
    Œ≥lorentz.(view(sl.Œ≥a,i), view(sl.Œ≥s,i), view(sl.na,i), T, P, P‚Çö)
end

"""
    florentz(ŒΩ, ŒΩl, Œ≥)

Evaluate lorentz profile

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `Œ≥`: lorentzian broadening coefficient
"""
florentz(ŒΩ, ŒΩl, Œ≥)::Float64 = Œ≥/(œÄ*((ŒΩ - ŒΩl)*(ŒΩ - ŒΩl) + Œ≥*Œ≥))

"""
    lorentz(ŒΩ, ŒΩl, S, Œ≥)

Evaluate lorentzian absoption cross-section [cm``^2``/molecule]

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `S`: line absoption intensity [cm``^{-1}``/(molecule``\\cdot``cm``^{-2}``)]
* `Œ≥`: lorentzian broadening coefficient
"""
lorentz(ŒΩ, ŒΩl, S, Œ≥)::Float64 = S*florentz(ŒΩ, ŒΩl, Œ≥)

"""
    lorentz(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Compute a single lorentzian absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and lorentzian profiles are evaluated along the way.

# Arguments
* `ŒΩ`: single wavenumber indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function lorentz(ŒΩ, sl::SpectralLines, T, P, P‚Çö, ŒîŒΩcut=25.0)::Float64
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    sum(lorentz.(ŒΩ, view(sl.ŒΩ,i), S, Œ≥))
end

"""
    lorentz!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Identical to [`lorentz`](@ref), fills the vector of cross-sections (`œÉ`) in-place.
"""
function lorentz!(œÉ::AbstractVector,
                  ŒΩ::AbstractVector,
                  sl::SpectralLines,
                  T,
                  P,
                  P‚Çö,
                  ŒîŒΩcut=25.0)
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    surf!(œÉ, lorentz, ŒΩ, view(sl.ŒΩ,i), ŒîŒΩcut, S, Œ≥)
end

"""
    lorentz(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Compute a vector of lorentzian absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and lorentzian profiles are evaluated along the way.

# Arguments
* `ŒΩ`: vector of wavenumbers indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function lorentz(ŒΩ::AbstractVector,
                 sl::SpectralLines,
                 T,
                 P,
                 P‚Çö,
                 ŒîŒΩcut=25.0)::Vector{Float64}
    œÉ = zeros(Float64, length(ŒΩ))
    lorentz!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut)
    return œÉ
end

#-------------------------------------------------------------------------------
# voigt profile

export fvoigt, voigt, voigt!

"""
    fvoigt(ŒΩ, ŒΩl, Œ±, Œ≥)

Evaluate Voigt profile

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `Œ±`: doppler (gaussian) broadening coefficient
* `Œ≥`: lorentzian broadening coefficient
"""
function fvoigt(ŒΩ, ŒΩl, Œ±, Œ≥)::Float64
    #inverse of the doppler parameter
    Œ≤ = 1/Œ±
    #factor for real and complex parts of Faddeeva args, avoiding Œ≤ division
    d = sqln2*Œ≤
    #arguments to Faddeeva function
    x = (ŒΩ - ŒΩl)*d
    y = Œ≥*d
    #evaluate real part of Faddeeva function
    f = faddeyeva(x,y)
    #final calculation, avoiding Œ± division by using Œ≤ again
    osqœÄln2*Œ≤*f
end

"""
    voigt(ŒΩ, ŒΩl, S, Œ±, Œ≥)

Evaluate Voigt absoption cross-section [cm``^2``/molecule]

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `S`: line absoption intensity [cm``^{-1}``/(molecule``\\cdot``cm``^{-2}``)]
* `Œ±`: doppler (gaussian) broadening coefficient
* `Œ≥`: lorentzian broadening coefficient
"""
voigt(ŒΩ, ŒΩl, S, Œ±, Œ≥)::Float64 = S*fvoigt(ŒΩ, ŒΩl, Œ±, Œ≥)

"""
    voigt(ŒΩ, sl::SpectralLines, T, P, P‚Çö, ŒîŒΩcut=25)

Evaluate Voigt absorption cross-section at a single wavenumber.
"""
function voigt(ŒΩ, sl::SpectralLines, T, P, P‚Çö, ŒîŒΩcut=25.0)::Float64
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    sum(voigt.(ŒΩ, view(sl.ŒΩ,i), S, Œ±, Œ≥))
end

"""
    voigt!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Identical to [`voigt`](@ref), but fills the vector of cross-sections (`œÉ`) in-place.
"""
function voigt!(œÉ::AbstractVector,
                ŒΩ::AbstractVector,
                sl::SpectralLines,
                T,
                P,
                P‚Çö,
                ŒîŒΩcut=25.0)
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    surf!(œÉ, voigt, ŒΩ, view(sl.ŒΩ,i), ŒîŒΩcut, S, Œ±, Œ≥)
end

"""
    voigt(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=25)

Compute a vector of Voigt absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and Voigt profiles are evaluated along the way.

# Arguments
* `ŒΩ`: vector of wavenumbers indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function voigt(ŒΩ::AbstractVector,
               sl::SpectralLines,
               T,
               P,
               P‚Çö,
               ŒîŒΩcut=25.0)::Vector{Float64}
    œÉ = zeros(Float64, length(ŒΩ))
    voigt!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut)
    return œÉ
end

#-------------------------------------------------------------------------------
# sublorentzian profile for CO2
# Perrin, M. Y., and J. M. Hartman. ‚ÄúTemperature-Dependent Measurements and Modeling of Absorption by CO2-N2 Mixtures in the Far Line-Wings of the 4.3 Œúm CO2 Band.‚Äù Journal of Quantitative Spectroscopy and Radiative Transfer, vol. 42, no. 4, 1989, pp. 311‚Äì17.

export ŒßPHCO2, PHCO2, PHCO2!

"""
    ŒßPHCO2(ŒΩ, ŒΩl, T)

Compute the `Œß` (Chi) factor for sub-lorentzian CO2 line profiles, as in
* [Perrin, M. Y., and J. M. Hartman. ‚ÄúTemperature-Dependent Measurements and Modeling of Absorption by CO2-N2 Mixtures in the Far Line-Wings of the 4.3 Œúm CO2 Band.‚Äù Journal of Quantitative Spectroscopy and Radiative Transfer, vol. 42, no. 4, 1989, pp. 311‚Äì17.](https://www.sciencedirect.com/science/article/abs/pii/0022407389900770)

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `T`: temperature [K]
"""
function ŒßPHCO2(ŒΩ, ŒΩl, T)::Float64
    ŒîŒΩ = abs(ŒΩ - ŒΩl)
    if ŒîŒΩ < 3.0
        return 1.0
    end
    B1 = 0.0888 - 0.16*exp(-0.0041*T)
    if ŒîŒΩ < 30.0
        return exp(-B1*(ŒîŒΩ - 3.0))
    end
    B2 = 0.0526*exp(-0.00152*T)
    if ŒîŒΩ < 120.0
        return exp(-B1*27.0 - B2*(ŒîŒΩ - 30.0))
    end
    return exp(-B1*27.0 - B2*90.0 - 0.0232*(ŒîŒΩ - 120.0))
end

"""
    PHCO2(ŒΩ, ŒΩl, S, Œ±)

Evaluate Perrin & Hartman sub-lorentzian absoption cross-section [cm``^2``/molecule] for CO2

# Arguments
* `ŒΩ`: profile evaluation wavenumber [cm``^{-1}``]
* `ŒΩl`: wavenumber of absorption line [cm``^{-1}``]
* `T`: temperature [K]
* `S`: line absoption intensity [cm``^{-1}``/(molecule``\\cdot``cm``^{-2}``)]
* `Œ±`: doppler (gaussian) broadening coefficient
* `Œ≥`: lorentzian broadening coefficient
"""
function PHCO2(ŒΩ, ŒΩl, T, S, Œ±, Œ≥)::Float64
    Œß = ŒßPHCO2(ŒΩ, ŒΩl, T)
    voigt(ŒΩ, ŒΩl, S, Œ±, Œß*Œ≥)
end

"""
    PHCO2(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=500)

Compute a single Perrin & Hartman sub-lorentzian CO2 absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and profiles are evaluated along the way.

# Arguments
* `ŒΩ`: single wavenumber indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function PHCO2(ŒΩ, sl::SpectralLines, T, P, P‚Çö, ŒîŒΩcut=500.0)::Float64
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    sum(PHCO2.(ŒΩ, view(sl.ŒΩ,i), T, S, Œ±, Œ≥))
end

"""
    PHCO2!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=500)

Identical to [`PHCO2`](@ref), but fills the vector of cross-sections (`œÉ`) in-place.
"""
function PHCO2!(œÉ::AbstractVector,
                ŒΩ::AbstractVector,
                sl::SpectralLines,
                T,
                P,
                P‚Çö,
                ŒîŒΩcut=500.0)
    i = includedlines(ŒΩ, sl.ŒΩ, ŒîŒΩcut)
    S = scaleintensity(sl, i, T)
    Œ± = Œ±doppler(sl, i, T)
    Œ≥ = Œ≥lorentz(sl, i, T, P, P‚Çö)
    f(ŒΩ, ŒΩl, S, Œ±, Œ≥) = PHCO2(ŒΩ, ŒΩl, T, S, Œ±, Œ≥) #shove T into the function
    surf!(œÉ, f, ŒΩ, view(sl.ŒΩ,i), ŒîŒΩcut, S, Œ±, Œ≥)
end

"""
    PHCO2(ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut=500)

Compute a vector of Perrin & Hartman sub-lorentzian CO2 absorption cross-sections [cm``^2``/molecule] from a [`SpectralLines`](@ref) object. Temperature scaling and profiles are evaluated along the way.

# Arguments
* `ŒΩ`: vector of wavenumbers indicating where to evaluate [cm``^{-1}``]
* `sl`: [`SpectralLines`](@ref)
* `T`: temperature [K]
* `P`: air pressure [Pa]
* `P‚Çö`: partial pressure [Pa]
* `ŒîŒΩcut`: profile truncation distance [cm``^{-1}``]
"""
function PHCO2(ŒΩ::AbstractVector,
               sl::SpectralLines,
               T,
               P,
               P‚Çö,
               ŒîŒΩcut=500.0)::Vector{Float64}
    œÉ = zeros(Float64, length(ŒΩ))
    PHCO2!(œÉ, ŒΩ, sl, T, P, P‚Çö, ŒîŒΩcut)
    return œÉ
end

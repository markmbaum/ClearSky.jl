#minimum pressure in temperature profiles and floor for hydrostatic profile
const PMIN = 1e-9

#-------------------------------------------------------------------------------
#constructing generalized hydrostatic pressure profiles and inverting for z

export scaleheight, hydrostatic, altitude
export Hydrostatic

"""
    scaleheight(g, Œº, T)

Evaluate the [atmospheric scale height](https://en.wikipedia.org/wiki/Scale_height),

``\\frac{RT}{Œºg}``

where ``R`` is the [universial gas constant](https://en.wikipedia.org/wiki/Gas_constant).

# Arguments
* `g`: gravitational acceleration [m/s``^s``]
* `Œº`: mean molar mass [kg/mole]
* `T`: temperature [K]
"""
scaleheight(g, Œº, T)::Float64 = ùêë*T/(Œº*g)

#parameterized hydrostatic relation in log coordinates
function dlnPdz(z, lnP, param::Tuple)::Float64
    #unpack parameters
    P‚Çõ, g, fT, fŒº = param
    #evaluate temperature and mean molar mass [kg/mole]
    P = exp(lnP)
    if P < PMIN
        return 0.0
    end
    P = min(P, P‚Çõ) #don't allow tiny numerical dips below P‚Çõ
    T = fT(P)
    Œº = fŒº(T, P)
    #evaluate derivative
    -Œº*g/(ùêë*T)
end

"""
    hydrostatic(z, P‚Çõ, g, fT, fŒº)

Compute the hydrostatic pressure [Pa] at a specific altitude using arbitrary atmospheric profiles of temperature of mean molar mass

# Arguments

* `z`: altitude [m] to compute pressure at
* `P‚Çõ`: surface pressure [Pa]
* `g`: gravitational acceleration [m/s``^2``]
* `fT`: temperature as a function of pressure, `fT(P)`
* `fŒº`: mean molar mass as a function of pressure and temperature `fŒº(T,P)`
"""
function hydrostatic(z, P‚Çõ, g, fT::T, fŒº::U)::Float64 where {T,U}
    @assert z >= 0 "cannot compute pressure at negative altitude $z m"
    @assert P‚Çõ > PMIN "pressure cannot be less than $PMIN Pa"
    #parameters
    param = (P‚Çõ, g, fT, fŒº)
    #integrate in log coordinates
    lnP = radau(dlnPdz, log(P‚Çõ), 0, z, param)
    #convert
    exp(lnP)
end

"""
    altitude(P, P‚Çõ, g, fT, fŒº)

Compute the altitude [m] at which a specific hydrostatic pressure occurs using arbitrary atmospheric profiles of temperature of mean molar mass

# Arguments

* `P`: pressure [Pa] to compute altitude at
* `P‚Çõ`: surface pressure [Pa]
* `g`: gravitational acceleration [m/s``^2``]
* `fT`: temperature as a function of pressure, `fT(P)`
* `fŒº`: mean molar mass as a function of pressure and temperature `fŒº(T,P)`
"""
function altitude(P, P‚Çõ, g, fT::T, fŒº::U)::Float64 where {T,U}
    #pressure decreases monotonically, find altitudes bracketing P‚Çú
    z‚ÇÅ = 0.0
    z‚ÇÇ = 1e2
    P‚ÇÅ = P‚Çõ
    P‚ÇÇ = hydrostatic(z‚ÇÇ, P‚Çõ, g, fT, fŒº)
    while P‚ÇÇ > P
        z‚ÇÅ = z‚ÇÇ
        z‚ÇÇ *= 2
        P‚ÇÅ = P‚ÇÇ
        P‚ÇÇ = hydrostatic(z‚ÇÇ, P‚Çõ, g, fT, fŒº)
    end
    #find precise altitude where P = P‚Çú
    falseposition(z -> log(hydrostatic(z, P‚Çõ, g, fT, fŒº)) - log(P), z‚ÇÅ, z‚ÇÇ)
end

"""
[Function-like type](https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects) for initializing and evaluating a hydrostatic pressure profile with arbitrary temperature and mean molar mass profiles. A `Hydrostatic` object maps altitude to pressure.

# Constructor

    Hydrostatic(P‚Çõ, P‚Çú, g, fT, fŒº)

* `P‚Çõ`: surface pressure [Pa]
* `P‚Çú`: top of profile pressure [Pa]
* `g`: gravitational acceleration [m/s``^2``]
* `fT`: temperature as a function of presssure, `fT(P)`
* `fŒº`: mean molar mass as a function of temperature and pressure, `fŒº(T,P)`

For a constant molar mass or temperature, you can use [anonymous functions](https://docs.julialang.org/en/v1/manual/functions/#man-anonymous-functions) directly. For example, to construct a hydrostatic pressure profile for a crude Earth-like atmosphere:

```@example
#moist adiabatic temperature profile
M = MoistAdiabat(288, 1e5, 1040, 1996, 0.029, 0.018, 2.3e6, psatH2O, Ptropo=1e4);
#hydrostatic pressure profile with constant mean molar mass
H = Hydrostatic(1e5, 1, 9.8, M, (T,P)->0.029);
#evaluate pressures at a few different altitudes
H.([0, 1e3, 1e4])
```
"""
struct Hydrostatic
    œï::LinearInterpolator
    z‚Çú::Float64
end

function Hydrostatic(P‚Çõ, P‚Çú, g, fT::T, fŒº::U, N::Int=1000) where {T,U}
    #find the altitude corresponding to P‚Çú
    z‚Çú = altitude(P‚Çú, P‚Çõ, g, fT, fŒº)
    #interpolation knots and output array
    z = logrange(0, z‚Çú, N)
    lnP = zeros(Float64, N)
    #integrate to get a full pressure profile
    radau!(lnP, z, dlnPdz, log(P‚Çõ), 0, z‚Çú, (P‚Çõ, g, fT, fŒº))
    #construct and return
    Hydrostatic(LinearInterpolator(z, lnP), z‚Çú)
end

function (H::Hydrostatic)(z)::Float64
    @assert 0 <= z <= H.z‚Çú "altitude $z out of range [0,$(H.z‚Çú)]"
    exp(H.œï(z, false))
end

"""
    altitude(H::Hydrostatic, P)

Compute the altitude at which a specific pressure occurs in a hydrostatic pressure profile.
"""
altitude(H::Hydrostatic, P)::Float64 = falseposition(z -> log(H(z)) - log(P), 0.0, H.z‚Çú)

#-------------------------------------------------------------------------------

#general function for adiabat with one condensable in bulk non-condensable
function dTdœâ(œâ, T, c‚Çö‚Çô, c‚Çö·µ•, R‚Çô, R·µ•, L, psat::F)::Float64 where {F}
    #molar mixing ratio of condensible
    Œ± = psat(T)/œâ2P(œâ)
    #whole expression at once
    -T*(R‚Çô/c‚Çö‚Çô)*(1 + Œ±*L/(R‚Çô*T))/(1 + Œ±*(c‚Çö·µ•/c‚Çö‚Çô + (L/(T*R·µ•) - 1)*L/(c‚Çö‚Çô*T)))
end

dTdœâ(œâ, T, param::Tuple)::Float64 = dTdœâ(œâ, T, param...)

#------------------------------------

abstract type AbstractAdiabat end

export MoistAdiabat, DryAdiabat
export tropopause

#------------------------------------

"""
[Function-like type](https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects) for initializing and evaluating a dry adiabatic temperature profile. Optional uniform upper atmospheric temperature below a specified temperature or pressure.

# Constructor

    DryAdiabat(T‚Çõ, P‚Çõ, c‚Çö, Œº, P‚Çú=$PMIN; Tstrat=0.0, Ptropo=0.0)

* `T‚Çõ`: surface temperature [K]
* `P‚Çõ`: surface pressure [K]
* `P‚Çú`: highest allowable pressure (can be small but not zero) [Pa]
* `c‚Çö`: specific heat of the atmosphere [J/kg/K]
* `Œº`: molar mass of the atmosphere [kg/mole]
* `P‚Çú`: highest pressure in the temperature profile (should generally be small to avoid evaluating out of range) [Pa]

If `Tstrat` is greater than zero, the temperature profile will not drop below that temperature. If `Ptropo` is greater than zero, the temperature profile at pressures lower than `Ptropo` will be equal to the temperature at exactly `Ptropo`. `Tstrat` and `Ptropo` cannot be greater than zero simultaneously.

# Example

Once constructed, use a `DryAdiabat` like a function to compute temperature at a given pressure.

```@example
T‚Çõ = 288; #surface temperature [K]
P‚Çõ = 1e5; #surface pressure [Pa]
c‚Çö = 1040; #specific heat of air [J/kg/K]
Œº = 0.029; #molar mass of air [kg/mole]

#construct the dry adiabat with an upper atmosphere temperature of 190 K
D = DryAdiabat(T‚Çõ, P‚Çõ, c‚Çö, Œº, Tstrat=190);

#temperatures at 40-10 kPa
D.([4e4, 3e4, 2e4, 1e4])
```
"""
struct DryAdiabat <: AbstractAdiabat
    T‚Çõ::Float64
    P‚Çõ::Float64
    P‚Çú::Float64
    c‚Çö::Float64
    Œº::Float64
    Tstrat::Float64
    Ptropo::Float64
end

function DryAdiabat(T‚Çõ, P‚Çõ, c‚Çö, Œº, P‚Çú=PMIN; Tstrat=0, Ptropo=0)
    @assert P‚Çõ > P‚Çú "P‚Çõ must be greater than P‚Çú"
    @assert P‚Çú > 0 "P‚Çú must be greater than 0"
    DryAdiabat(T‚Çõ, P‚Çõ, P‚Çú, c‚Çö, Œº, Tstrat, Ptropo)
end

#------------------------------------

"""
[Function-like type](https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects) for initializing and evaluating a moist adiabatic temperature profile. Optional uniform upper atmospheric temperature below a specified temperature or pressure.

# Constructor

    MoistAdiabat(T‚Çõ, P‚Çõ, c‚Çö‚Çô, c‚Çö·µ•, Œº‚Çô, Œº·µ•, L, psat, P‚Çú=$PMIN; Tstrat=0, Ptropo=0, N=1000)

* `T‚Çõ`: surface temperature [K]
* `P‚Çõ`: surface pressure [K]
* `c‚Çö‚Çô`: specific heat of the non-condensible atmospheric component (air) [J/kg/K]
* `c‚Çö·µ•`: specific heat of the condensible atmospheric component [J/kg/K]
* `Œº‚Çô`: molar mass of the non-condensible atmospheric component (air) [kg/mole]
* `Œº·µ•`: molar mass of the condensible atmospheric component [kg/mole]
* `L`: condsible component's latent heat of vaporization [J/kg]
* `psat`: function defining the saturation vapor pressure for a given temperature, `psat(T)`
* `P‚Çú`: highest pressure in the temperature profile (should generally be small to avoid evaluating pressures out of range) [Pa]

If `Tstrat` is greater than zero, the temperature profile will not drop below that temperature. If `Ptropo` is greater than zero, the temperature profile at pressures lower than `Ptropo` will be equal to the temperature at exactly `Ptropo`. `Tstrat` and `Ptropo` cannot be greater than zero simultaneously.

The profile is evaluated along a number of pressure values in the atmosphere set by `N`. REVISE. Those points are then used to construct a cubic spline interpolator for efficient and accurate temperature calculation. Experience indicates that 1000 points is very accurate and also fast.

# Example

Once constructed, use a `MoistAdiabat` like a function to compute temperature at a given pressure.

```@example
T‚Çõ = 288; #surface temperature [K]
P‚Çõ = 1e5; #surface pressure [Pa]
c‚Çö‚Çô = 1040; #specific heat of air [J/kg/K]
c‚Çö·µ• = 1996; #specific heat of H2O [J/kg/K]
Œº‚Çô = 0.029; #molar mass of air [kg/mole]
Œº·µ• = 0.018; #molar mass of H2O [kg/mole]
L = 2.3e6; #H2O latent heat of vaporization [J/kg]

#a saturation vapor pressure function for H2O is built in
psat = psatH2O;

#construct the moist adiabat with a tropopause pressure of 1e4 Pa
M = MoistAdiabat(T‚Çõ, P‚Çõ, c‚Çö‚Çô, c‚Çö·µ•, Œº‚Çô, Œº·µ•, L, psat, Ptropo=1e4);

#temperatures at 30-5 kPa
M.([3e4, 2e4, 1e4, 5e3])
```
"""
struct MoistAdiabat <: AbstractAdiabat
    œï::LinearInterpolator
    P‚Çõ::Float64
    P‚Çú::Float64
    Tstrat::Float64
    Ptropo::Float64
end

function MoistAdiabat(T‚Çõ, P‚Çõ, c‚Çö‚Çô, c‚Çö·µ•, Œº‚Çô, Œº·µ•, L, psat::F,
                      P‚Çú=PMIN;
                      Tstrat=0.0,
                      Ptropo=0.0,
                      N::Int=1000) where {F<:Function}
    if (Tstrat != 0) & (Ptropo != 0)
        throw("Cannot have nonzero Tstrat and Ptropo, must use one or the other")
    end
    @assert P‚Çõ > P‚Çú "P‚Çõ must be greater than P‚Çú"
    @assert P‚Çú > 0 "P‚Çú must be greater than 0"
    #interpolation knots and output vector
    œâ‚ÇÅ, œâ‚ÇÇ = P2œâ(P‚Çõ, P‚Çú)
    œâ = logrange(œâ‚ÇÅ, œâ‚ÇÇ, N)
    T = zeros(Float64, N)
    #pack the parameters
    param = (c‚Çö‚Çô, c‚Çö·µ•, ùêë/Œº‚Çô, ùêë/Œº·µ•, L, psat)
    #integrate with in-place dense output
    radau!(T, œâ, dTdœâ, T‚Çõ, œâ[1], œâ[end], param)
    #natural spline in log pressure coordinates
    MoistAdiabat(LinearInterpolator(œâ, T), P‚Çõ, P‚Çú, Tstrat, Ptropo)
end

#------------------------------------
#general operations with an adiabat

#direct calculation
temperature(Œì::DryAdiabat, P)::Float64 = Œì.T‚Çõ*(P/Œì.P‚Çõ)^(ùêë/(Œì.Œº*Œì.c‚Çö))

#coordinate conversion and interpolation
temperature(Œì::MoistAdiabat, P)::Float64 = Œì.œï(P2œâ(P), false)

#find the pressure corresponding to a temperature (ignores Tstrat, Ptropo)
function pressure(Œì::AbstractAdiabat, T)::Float64
    T‚Çõ = Œì(Œì.P‚Çõ)
    T‚Çú = Œì(Œì.P‚Çú)
    @assert T‚Çõ >= T >= T‚Çú "temperature $T K out of adiabat range [$(T‚Çõ),$(T‚Çú)] K"
    falseposition(P -> Œì(P) - T, Œì.P‚Çõ, Œì.P‚Çú)
end

function (Œì::AbstractAdiabat)(P)::Float64
    #check bounds
    if (P < Œì.P‚Çú) && !(P ‚âà Œì.P‚Çú)
        throw("Adiabat defined within $(Œì.P‚Çú) and $(Œì.P‚Çõ) Pa, $P Pa is too low.")
    end
    if (P > Œì.P‚Çõ) && !(P ‚âà Œì.P‚Çõ)
        throw("Adiabat defined within $(Œì.P‚Çú) and $(Œì.P‚Çõ) Pa, $P Pa is too high.")
    end
    #check if pressure is below tropopause
    if P < Œì.Ptropo
        return temperature(Œì, Œì.Ptropo)
    end
    #what the temperature would be without any floor
    T = temperature(Œì, P)
    #apply the floor, if desired
    if T < Œì.Tstrat
        return Œì.Tstrat
    end
    #ensure positive
    @assert T > 0 "non-positive temperature ($T K) encountered in adiabat at $P Pa"
    return T
end

"""
    tropopause(Œì::AbstractAdiabat)

Compute the temperature and pressure at which the tropopause occurs in an adiabatic temperature profile. This function can be called on a `DryAdiabat` or `MoistAdiabat` if it was constructed with nonzero `Tstrat` or `Ptropo`. Returns a tuple, `(T,P)`.
"""
function tropopause(Œì::AbstractAdiabat)::Tuple{Float64,Float64}
    if Œì.Ptropo != 0
        return temperature(Œì, Œì.Ptropo), Œì.Ptropo
    end
    if Œì.Tstrat != 0
        return Œì.Tstrat, pressure(Œì, Œì.Tstrat)
    end
    throw("no stratosphere temperature or pressure has been defined (Tstrat/Ptropo)")
end

#-------------------------------------------------------------------------------

export psatH2O, tsatCO2, ozonelayer

"""
    psatH2O(T)

Compute the saturation partial pressure of water vapor at a certain temperature using expressions from

* Murphy, D. M. & Koop, T. Review of the vapour pressures of ice and supercooled water for atmospheric applications. Q. J. R. Meteorol. Soc. 131, 1539‚Äì1565 (2005).
"""
function psatH2O(T)::Float64
    a = log(T)
    b = 1/T
    if T >= 273.15
        #equation 10
        c = 53.878 - 1331.22*b - 9.44523*a + 0.014025*T
        d = c*tanh(0.0415*(T - 218.8))
        P = exp(54.842763 - 6763.22*b - 4.21*a + 3.67e-4*T + d)
    else
        #equation 7
        P = exp(9.550426 - 5723.265*b + 3.53068*a - 0.00728332*T)
    end
    return P
end

"""
    tsatCO2(P)

Compute the saturation pressure of carbon dioxide at a certain pressure using expression from Fanale et al. (1982)
"""
function tsatCO2(P)::Float64
    @assert P <= 518000.0 "Pressure cannot be above 518000 Pa for CO2 saturation temperature"
    -3167.8/(log(0.01*P) - 23.23)
end

"""
    ozonelayer(P)

Approximate the molar concentration of ozone in Earth's ozone layer using an 8 ppm peak at 1600 Pa
"""
function ozonelayer(P)::Float64 #yields molar concentration with peak at 8 ppm
    P = log(P)
    P‚ÇÅ = 10.146433731146518 #ln(25500)
    P‚ÇÇ = 7.3777589082278725 #ln(1600)
    P‚ÇÉ = 4.605170185988092  #ln(100)
    C‚ÇÇ = 8e-6
    if P‚ÇÇ <= P <= P‚ÇÅ
        return C‚ÇÇ*(P‚ÇÅ - P)/(P‚ÇÅ - P‚ÇÇ)
    elseif P‚ÇÉ <= P <= P‚ÇÇ
        return C‚ÇÇ*(P - P‚ÇÉ)/(P‚ÇÇ - P‚ÇÉ)
    end
    return 0
end

export RCM

#------------------------------------------------------------------------------
# definition & construction

struct RCM{A<:Real,ùíª‚ÇÅ,ùíª‚ÇÇ,ùíª‚ÇÉ,ùíª‚ÇÑ,C<:AbstractNumericalCore}
    P‚Çë::Vector{A}
    T‚Çë::Vector{A} #fossil initial condition
    P·µ£::Vector{A}
    P::Vector{A}
    T::Vector{A}
    g::A #gravity [m/s^2]
    ùíªŒº::ùíª‚ÇÅ #mean molar mass function (T,P)->Œº [kg/mole]
    ùíªS::ùíª‚ÇÇ #stellar insolation at TOA ŒΩ->I [W/m^2/cm^-1]
    ùíªa::ùíª‚ÇÉ #surface albedo ŒΩ->a [unitless]
    ùíªc‚Çö::ùíª‚ÇÑ #heat capacity function (T,P)->c‚Çö [J/kg/K]
    c‚Çõ::A #surface heat capacity [J/m^2/K] 
    ùíú::AcceleratedAbsorber
    ŒΩ::Vector{Float64}
    core::C
    F::FluxPack{A}
    np::Int64 #number of atmospheric cells (including surface)
    nŒΩ::Int64
    n·µ§::Vector{Int64} #update counters for rows, just curious
    R::Vector{A} #net radiative fluxes at cell edges
    H::Vector{A} #cell heating rate [K/s]
    J::Matrix{A} #Jacobian
end

function Base.show(io::IO, ‚Ñõ::RCM{A}) where {A}
    @unpack P‚Çë, ŒΩ, T, core, g, np, nŒΩ = ‚Ñõ
    print(io, "RCM{$A,$(typeof(core))}\n")
    print(io, "  gravity is $g m/s^2\n")
    Pmin, Pmax = round(minimum(P‚Çë), sigdigits=4), round(maximum(P‚Çë), sigdigits=4)
    print(io, "  $np pressure layers ‚àà [$Pmin, $Pmax] Pa\n")
    ŒΩmin, ŒΩmax = round(minimum(ŒΩ), sigdigits=4), round(maximum(ŒΩ), sigdigits=4)
    print(io, "  $nŒΩ wavenumber coordinates ‚àà [$ŒΩmin, $ŒΩmax] cm^-1\n")
    Tmin, Tmax = round(minimum(T), sigdigits=4), round(maximum(T), sigdigits=4)
    print(io, "  temperature currently ‚àà [$Tmin, $Tmax] K")
end

function RCM(P‚Çë::AbstractVector{<:Real},
             T‚Çë::AbstractVector{<:Real},
             g::Real,
             ùíªŒº,
             ùíªS,
             ùíªa,
             ùíªc‚Çö,
             c‚Çõ::Real,
             absorbers...;
             core::AbstractNumericalCore=Discretized(),
             radmul::Int=2)
    #demand pressure coordiantes are ascending
    W = typeof(float(T‚Çë[1]))
    idx = sortperm(P‚Çë)
    P‚Çë = collect(W, P‚Çë[idx])
    T‚Çë = collect(W, T‚Çë[idx])
    #check the numbers
    np = length(P‚Çë)
    @assert length(T‚Çë) == np "must have same number of initial temperature and pressure values"
    #values at midpoints between edges (cell centers) and surface
    P = similar(P‚Çë)
    T = similar(T‚Çë)
    for i ‚àà 1:np-1
        P[i] = (P‚Çë[i] + P‚Çë[i+1])/2
        T[i] = (T‚Çë[i] + T‚Çë[i+1])/2
    end
    P[end] = P‚Çë[end]
    T[end] = T‚Çë[end]
    #build up extra radiative nodes with weighted averaging
    @assert ((radmul % 2 == 0) | (radmul == 1)) "radmul must be an even integer or 1"
    nrad = radmul*(np - 1) + 1
    P·µ£ = similar(P‚Çë, nrad)
    P‚ÇÅ = @view P‚Çë[1:end-1]
    P·µ£[1:np-1] .= P‚ÇÅ
    P‚ÇÇ = @view P‚Çë[2:end]
    i = np
    for j ‚àà 2:radmul
        w‚ÇÅ = j - 1
        w‚ÇÇ = radmul - w‚ÇÅ
        @. P·µ£[i:i+np-2] = (w‚ÇÅ*P‚ÇÅ + w‚ÇÇ*P‚ÇÇ)/radmul
        i += np - 1
    end
    P·µ£[end] = P‚Çë[end]
    sort!(P·µ£)
    #parse absorbers
    ùí∞, _, nŒΩ = unifyabsorbers(absorbers)
    #prepare accelerated absorption calculations
    ùíú = AcceleratedAbsorber(T‚Çë, P‚Çë, ùí∞)
    #handle types
    c‚Çõ = convert(W, c‚Çõ)
    g = convert(W, g)
    #make room for radiative calculations
    F = FluxPack(nrad, nŒΩ, W)
    #cross-section update tracker
    n·µ§ = zeros(Int64, np)
    #make room for heating calculations
    R = zeros(W, np)
    H = zeros(W, np)
    J = zeros(W, np, np)
    #construct
    RCM(P‚Çë, T‚Çë, P·µ£, P, T, g, ùíªŒº, ùíªS, ùíªa, ùíªc‚Çö, c‚Çõ, ùíú, ùíú.ŒΩ, core, F, np, nŒΩ, n·µ§, R, H, J)
end

#------------------------------------------------------------------------------
# time derivatives and such

export heating!
function heating!(‚Ñõ::RCM, Œ¥·µ§::Real=1)::Nothing
    @unpack P‚Çë, T‚Çë, P·µ£, P, T, g, ùíªŒº, ùíªS, ùíªa, ùíªc‚Çö, c‚Çõ, ùíú, core, F, np, nŒΩ, n·µ§, R, H = ‚Ñõ
    
    ùíªT = AtmosphericProfile(P, T)
    radiate!(F, core, P·µ£, g, ùíªT, ùíªŒº, ùíªS, ùíªa, ùíú)

    #====================================================================
    Coordinates are a little tricky here. The "upward" flux Fup is going
    out of the atmosphere, away from the surface. However, the positive
    direction is the other way because pressure is increasing toward the
    surface and the model discretization is along pressure coordinates.
    So, although the net flux is typically F‚Å∫ - F‚Åª, it must be reversed
    here to respect the true positive direction.
    ====================================================================#
    ùíªFnet = AtmosphericProfile(P·µ£, F.Fnet)
    @. R = -ùíªFnet(P‚Çë) #F.F‚Åª - F.F‚Å∫

    #==========================
    heating rates
    ==========================#
    for i ‚àà 1:np-1
        #heat capacity [J/kg/K]
        c‚Çö = ùíªc‚Çö(T[i],P[i])
        #pressure layer thickness [Pa]
        ŒîP = P‚Çë[i+1] - P‚Çë[i]
        #radiation out of the cell minus radiation into it
        ŒîR = R[i] - R[i+1]
        #cell heating rate [K/s]
        H[i] = (g/c‚Çö)*ŒîR/ŒîP
    end
    #surface heating
    H[end] = R[end]/c‚Çõ
    #H[end] = (F.F‚Å∫[1] - F.F‚Åª[end])/c‚Çõ

    return nothing
end

export step!
function step!(‚Ñõ::RCM, Œît::Real)::Nothing
    heating!(‚Ñõ)
    ‚Ñõ.T .+= Œît*‚Ñõ.H
    return nothing
end

export jacobian!
function jacobian!(‚Ñõ::RCM, œµ::Real=1)::Nothing
    heating!(‚Ñõ)
    H = ‚Ñõ.H[:]
    T = ‚Ñõ.T
    for i ‚àà 1:‚Ñõ.np
        #perturb
        T[i] += œµ
        #evaluate
        heating!(‚Ñõ)
        #finite diff
        for j ‚àà 1:length(H)
            ‚Ñõ.J[j,i] = (‚Ñõ.H[j] - H[j])/œµ
        end
        #restore
        T[i] -= œµ
    end
    return nothing
end
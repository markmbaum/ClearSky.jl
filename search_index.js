var documenterSearchIndex = {"docs":
[{"location":"orbits_insolation/#Orbits-and-Insolation","page":"Orbits & Insolation","title":"Orbits and Insolation","text":"","category":"section"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"A collection of functions are available for working with general elliptical orbits and insolation patterns for planets orbiting stars.","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"Function arguments are defined below","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"Argument Definition Units\na semi-major axis m\ne eccentricity -\nE eccentric anomaly rad\nf true anomaly or stellar longitude rad\nγ obliquity rad\nm star mass kg\np precession angle rad\nθ latitude rad\nθₛ substellar latitude rad\nrₐ apoapsis distance m\nrₚ periapsis distance m\nt time sec\nT orbital period sec","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"The mass m, most precisely, should be the sum of the star mass and planet mass, m_s + m_p. For most cases the planet mass is negligible, however, and m_s + m_p approx m_s.","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"The precession angle p is defined so that when p=0, the northern hemisphere is tilted directly toward the star at periapsis. This means that northern summer occurs when planet is closet to the star. Different values of p  02π control when in the orbital path the equinoxes and solstices occur. For example, if p = π2, the vernal equinox occurs at periapsis and the northern hemisphere is moving into summer.","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"","category":"page"},{"location":"orbits_insolation/","page":"Orbits & Insolation","title":"Orbits & Insolation","text":"Modules = [ClearSky]\nPages   = [\"orbits.jl\", \"insolation.jl\"]","category":"page"},{"location":"orbits_insolation/#ClearSky.apoapsis-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.apoapsis","text":"apoapsis(a, e)\n\nCompute the apoapsis (farthest distance) distance using semi-major axis and eccentricity\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.eccentricanomaly-NTuple{4, Any}","page":"Orbits & Insolation","title":"ClearSky.eccentricanomaly","text":"eccentricanomaly(t, a, m, e)\n\nNumerically compute the eccentric anomaly using Kepler's equation\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.eccentricity-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.eccentricity","text":"eccentricity(rₚ, rₐ)\n\nCompute eccentricity\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.meananomaly-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.meananomaly","text":"meananomaly(E, e)\n\nCompute the mean anomaly\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.orbit","page":"Orbits & Insolation","title":"ClearSky.orbit","text":"orbit(a, m, e, N=1000)\n\nCreate a distance time-series of N points for an elliptical orbit, returning vectors for time, distance, and true anomaly\n\n\n\n\n\n","category":"function"},{"location":"orbits_insolation/#ClearSky.orbitaldistance-NTuple{4, Any}","page":"Orbits & Insolation","title":"ClearSky.orbitaldistance","text":"orbitaldistance(t, a, m, e)\n\nCompute the distance of a planet from its host, assuming the planet is at periapsis at t=0\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.orbitaldistance-Tuple{Any, Any, Any}","page":"Orbits & Insolation","title":"ClearSky.orbitaldistance","text":"orbitaldistance(a, f, e)\n\nCompute the distance of a planet from its host\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.orbitalperiod-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.orbitalperiod","text":"orbitalperiod(a, m)\n\nKepler's Third Law describing the orbital period of an elliptical orbit\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.periapsis-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.periapsis","text":"periapsis(a, e)\n\nCompute the periapsis (closest approach) distance using semi-major axis and eccentricity\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.semimajoraxis-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.semimajoraxis","text":"semimajoraxis(T, m)\n\nCompute the semi-major axis of an orbit\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.trueanomaly-NTuple{4, Any}","page":"Orbits & Insolation","title":"ClearSky.trueanomaly","text":"trueanomaly(t, a, m, e)\n\nCompute the true anomaly\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.trueanomaly-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.trueanomaly","text":"trueanomaly(E, e)\n\nCompute the true anomaly\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.annualfluxfactor-NTuple{4, Any}","page":"Orbits & Insolation","title":"ClearSky.annualfluxfactor","text":"annualfluxfactor(e, θ, γ, p)\n\nCompute the annually averaged flux factor for a latitude θ on a planet in a general elliptical orbit.\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.annualfluxfactors-Tuple{Any, Any, Any}","page":"Orbits & Insolation","title":"ClearSky.annualfluxfactors","text":"annualfluxfactors(e, γ, p; nθ=181)\n\nCompute a range of annually averaged flux factors for a planet in a general elliptical orbit. Returns a latitude vector (row values) and a vector of flux factors. nθ indicates the number of latitude samples.\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.diurnalfluxfactor-NTuple{7, Any}","page":"Orbits & Insolation","title":"ClearSky.diurnalfluxfactor","text":"diurnalfluxfactor(t, a, m, e, θ, γ, p)\n\nCompute the diurnally averaged fraction of incoming stellar flux received by a point at latitude θ for a general elliptical orbit\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.diurnalfluxfactor-Tuple{Any, Any, Any}","page":"Orbits & Insolation","title":"ClearSky.diurnalfluxfactor","text":"diurnalfluxfactor(θ, f, γ)\n\nCompute the diurnally averaged fraction of incoming stellar flux received by a point at latitude θ when the planet is at solar longitude (true anomaly) f, with obliquity γ\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.diurnalfluxfactor-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.diurnalfluxfactor","text":"diurnalfluxfactor(θ, θₛ)\n\nCompute the diurnally averaged fraction of incoming stellar flux received by a point at latitude θ when the substellar latitude is θₛ\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.diurnalfluxfactors-NTuple{5, Any}","page":"Orbits & Insolation","title":"ClearSky.diurnalfluxfactors","text":"diurnalfluxfactors(a, m, e, γ, p; nt=251, nθ=181)\n\nCompute a grid of diurnally averaged fractions of incoming stellar flux for a planet in a general elliptical orbit. Returns a time vector (column values) over one orbital period, latitude vector (row values), and the grid of flux factors. nt indicates the number of time samples around the orbit and nθ indicates the number of latitudes.\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.diurnalfluxfactors-Tuple{Any}","page":"Orbits & Insolation","title":"ClearSky.diurnalfluxfactors","text":"diurnalfluxfactors(γ; nf=251, nθ=181)\n\nCompute a grid of diurnally averaged fractions of incoming stellar flux received by a point at latitude θ for a planet with obliquity γ in a circular orbit. Returns  a solar longitude vector (column values), latitude vector (row values), and the grid of flux factors. nf indicates the number of points around the orbit and nθ indicates the number of latitudes.\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.hourangle-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.hourangle","text":"hourangle(θ, θₛ)\n\nCompute the hour angle\n\n\n\n\n\n","category":"method"},{"location":"orbits_insolation/#ClearSky.substellarlatitude-Tuple{Any, Any}","page":"Orbits & Insolation","title":"ClearSky.substellarlatitude","text":"substellarlatitude(f, γ)\n\nCompute the latitude of the substellar point for a given solar longitude f (true anomaly) and obliquity γ\n\n\n\n\n\n","category":"method"},{"location":"radiation/#Radiation","page":"Radiation","title":"Radiation","text":"","category":"section"},{"location":"radiation/#Core-Radiation-Functions","page":"Radiation","title":"Core Radiation Functions","text":"","category":"section"},{"location":"radiation/","page":"Radiation","title":"Radiation","text":"planck\nnormplanck\nstefanboltzmann\nequilibriumtemperature\ndτdP\nschwarzschild","category":"page"},{"location":"radiation/#ClearSky.planck","page":"Radiation","title":"ClearSky.planck","text":"planck(ν, T)\n\nCompute black body intensity [W/m^2/cm^-1/sr] using Planck's law\n\nArguments\n\nν: wavenumger [cm^-1]\nT: temperature [Kelvin]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.normplanck","page":"Radiation","title":"ClearSky.normplanck","text":"normplanck(ν, T)\n\nCompute black body intensity [W/m^2/cm^-1/sr] using Planck's law, normalized by the power emitted per unit area at the given temperature (stefanboltzmann),\n\nB(ν,T)/σT^4\n\nyielding units of 1/cm^-1/sr.\n\nArguments\n\nν: wavenumger [cm^-1]\nT: temperature [Kelvin]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.stefanboltzmann","page":"Radiation","title":"ClearSky.stefanboltzmann","text":"stefanboltzmann(T)\n\nCompute black body radiation power using the Stefan-Boltzmann law, σT^4 [W/m^2].\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.equilibriumtemperature","page":"Radiation","title":"ClearSky.equilibriumtemperature","text":"equilibriumtemperature(F, A)\n\nCompute the planetary equilibrium temperature, or equivalent blackbody temperature of a planet.\n\n(frac(1 - A)F4sigma)^14\n\nArguments\n\nF: stellar flux [W/m^2]\nA: albedo\n\n\n\n\n\nequilibriumtemperature(L, A, R)\n\nCompute the planetary equilibrium temperature, or equivalent blackbody temperature of a planet.\n\n(frac(1 - A)L16 sigma pi R^2)^14\n\nArguments\n\nL: stellar luminosity [W]\nA: albedo\nR: orbital distance [m]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.dτdP","page":"Radiation","title":"ClearSky.dτdP","text":"dτdP(σ, g, μ)\n\nEvaluate the differential increase in optical depth in pressure coordinates, equivalent to the schwarzschild equation without Planck emission.\n\nfracdτdP = σfractextrmN_Ag μ\n\nwhere N_A is Avogadro's number.\n\nArguments\n\nσ: absorption cross-section [cm^2/molecule]\ng: gravitational acceleration [m/s^2]\nμ: mean molar mass [kg/mole]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.schwarzschild","page":"Radiation","title":"ClearSky.schwarzschild","text":"schwarzschild(I, ν, σ, T, P)\n\nEvaluate the Schwarzschild differential equation for radiative transfer with units of length/height [m] and assuming the ideal gas law.\n\nfracdIdz = σfracPk_B TB_ν(T) - I\n\nwhere B_ν is planck's law.\n\nArguments\n\nI: radiative intensity [W/m^2/cm^-1/sr]\nν: radiation wavenumber [cm^-1]\nσ: absorption cross-section [cm^2/molecule]\nT: temperature [K]\nP: pressure [Pa]\n\n\n\n\n\nschwarzschild(I, ν, σ, g, μ, T)\n\nEvaluate the Schwarzschild differential equation for radiative transfer with pressure units [Pa] and assuming the ideal gas law.\n\nfracdIdP = σfractextrmN_Ag μB_ν(T) - I\n\nwhere B_ν is planck's law and N_A is Avogadro's number.\n\nArguments\n\nI: radiative intensity [W/m^2/cm^-1/sr]\nν: radiation wavenumber [cm^-1]\nσ: absorption cross-section [cm^2/molecule]\ng: gravitational acceleration [m/s^2]\nμ: mean molar mass [kg/mole]\nT: temperature [K]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#Radiation-Unit-Conversions","page":"Radiation","title":"Radiation Unit Conversions","text":"","category":"section"},{"location":"radiation/","page":"Radiation","title":"Radiation","text":"ν2f\nf2ν\nν2λ\nλ2ν\nλ2f\nf2λ","category":"page"},{"location":"radiation/#ClearSky.ν2f","page":"Radiation","title":"ClearSky.ν2f","text":"Convert wavenumber [cm^-1] to frequency [1/s]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.f2ν","page":"Radiation","title":"ClearSky.f2ν","text":"Convert frequency [1/s] to wavenumber [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.ν2λ","page":"Radiation","title":"ClearSky.ν2λ","text":"Convert wavenumber [cm^-1] to wavelength [m]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.λ2ν","page":"Radiation","title":"ClearSky.λ2ν","text":"Convert wavelength [m] to wavenumber [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.λ2f","page":"Radiation","title":"ClearSky.λ2f","text":"Convert wavelength [m] to frequency [1/s]\n\n\n\n\n\n","category":"function"},{"location":"radiation/#ClearSky.f2λ","page":"Radiation","title":"ClearSky.f2λ","text":"Convert frequency [1/s] to wavelength [m]\n\n\n\n\n\n","category":"function"},{"location":"gas_objects/#Gas-Objects","page":"Gas Objects","title":"Gas Objects","text":"","category":"section"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Gas objects are high-level representations of greenhouse gases that allow fast retrieval of absorption cross-sections over continuous ranges of temperature and pressure.","category":"page"},{"location":"gas_objects/#Creating-Gases","page":"Gas Objects","title":"Creating Gases","text":"","category":"section"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Before creating a gas object, you should start your Julia session with all available threads on your system. For example, if your computer has 8 threads available, use","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"julia --threads 8","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"then you can define the","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"vector of wavenumbers\ntemperature and pressure ranges (AtmosphericDomain)","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"over which its absorption cross-sections will be defined. For example,","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"using ClearSky\nν = LinRange(1, 2500, 2500);\nΩ = AtmosphericDomain((100,350), 12, (1,1e5), 24);","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"defines 2500 evenly spaced wavenumber samples over a typical window of longwave wavenumbers and an atmospheric domain between 100-350 K and 1-1e5 Pa. The numbers 12 and 24 define the number of interpolation nodes along the temperature and pressure axes, respectively.","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Now you can create a gas object directly from a par file containing the spectral line data from HITRAN. For example, to load carbon dioxide from the file \"CO2.par\" and assign a well-mixed concentration of 400 ppm,","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"co2 = WellMixedGas(\"CO2.par\", 400e-6, ν, Ω)","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"In the background, ClearSky does the following","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"reads the line data\ncomputes absorption cross-sections for each wavenumber, temperature, and pressure point defined by ν and Ω (using the voigt! profile by default)\ngenerates high-accuracy interpolation functions for the temperature-pressure grid at each wavenumber\nstores concentration information","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Consequently, loading gases may take some time. It will be faster with more threads and with fewer wavenumber, temperature, and pressure points.","category":"page"},{"location":"gas_objects/#Retrieving-Cross-Sections","page":"Gas Objects","title":"Retrieving Cross-Sections","text":"","category":"section"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Gases are function-like objects. They can be used like functions to retrieve concentration-scaled cross-sections at any temperature and pressure within the atmospheric domain. Computing cross-sections at a specific temperature and pressure, 250 K and 10000 Pa for example, is as simple as","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"co2(250, 1e4)","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"This returns a vector of cross-section values [cm^2/molecule] at each wavenumber point the gas was created with. The cross sections are scaled by the gas molar concentration that was used when constructing the gas.","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"If you only need a cross-section for one of the specific wavenumber points in the gas, you must pass the index of that wavenumber before the temperature and pressure. For example, to get the cross-section corresponding to ν[600],","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"co2(600, 250, 1e4)","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"To retrieve cross-sections that are not concentration-scaled, use the rawσ function.","category":"page"},{"location":"gas_objects/#Storing-Gases","page":"Gas Objects","title":"Storing Gases","text":"","category":"section"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"Creating gas objects may take some time if you have few threads, a huge number of wavenumbers, and/or a dense temperature-pressure grid in your AtmosphericDomain. To avoid loading the same gas twice, you can use Julia's built-in serialization functions to save gases to files and quickly reload them. For example, assuming you have a gas object named co2, the following code will write the gas to file, then reload it.","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"using Serialization\n#write the gas to a file called \"co2\"\nserialize(\"co2\", co2);\n#reload the same gas from that file\nco2 = deserialize(\"co2\");","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"","category":"page"},{"location":"gas_objects/","page":"Gas Objects","title":"Gas Objects","text":"AtmosphericDomain\nWellMixedGas\nVariableGas\nrawσ\nconcentration\nreconcentrate","category":"page"},{"location":"gas_objects/#ClearSky.AtmosphericDomain","page":"Gas Objects","title":"ClearSky.AtmosphericDomain","text":"Structure defining the temperature and pressure ranges over which absorption cross-sections are generated when constructing gas objects. AtmosphericDomain objects store the temperature and pressure coordinates of cross-section interpolation grids. More points lead to higher accuracy interpolation. Generally, about 12 temperature points and 24 pressure points results in maximum error of ~1 % and much smaller average error.\n\nField Type Description\nT Vector{Float64} temperature coordinates of grid [K]\nTmin Float64 lowest temperature value\nTmax Float64 highest temperature value\nnT Int64 number of temperature coordinates\nP Vector{Float64} pressure coordinates of grid [Pa]\nPmin Float64 lowest pressure value\nPmax Float64 highest pressure value\nnP Int64 number of pressure coordinates\n\nConstructor\n\nAtmosphericDomain(Trange, nT, Prange, nP)\n\nCreates a domain with the given temperature/pressure ranges and numbers of points. Trange and Prange should be tuples of two values. nT and nP indicate the number of points to use.\n\n\n\n\n\n","category":"type"},{"location":"gas_objects/#ClearSky.WellMixedGas","page":"Gas Objects","title":"ClearSky.WellMixedGas","text":"Gas type for well-mixed, radiatively active, atmospheric constituents. Must be constructed from a .par file or a SpectralLines object.\n\nConstructors\n\nWellMixedGas(sl::SpectralLines, C, ν, Ω, shape!=voigt!)\n\nsl: a SpectralLines object\nC: molar concentration of the constituent [mole/mole]\nν: vector of wavenumber samples [cm^-1]\nΩ: AtmosphericDomain\nshape!: line shape to use, must be the in-place version (voigt!, lorentz!, etc.)\nΔνcut: profile truncation distance [cm^-1]\n\nWellMixedGas(par::String, C, ν, Ω, shape!=voigt!, Δνcut=25; kwargs...)\n\nSame arguments as the first constructor but reads a par file directly into the gas object. Keyword arguments are passed through to readpar.\n\n\n\n\n\n","category":"type"},{"location":"gas_objects/#ClearSky.VariableGas","page":"Gas Objects","title":"ClearSky.VariableGas","text":"Gas type for variable concentration, radiatively active, atmospheric constituents (like water vapor). Must be constructed from a .par file or a SpectralLines object.\n\nConstructors\n\nVariableGas(sl::SpectralLines, C, ν, Ω, shape!=voigt!)\n\nsl: a SpectralLines object\nC: molar concentration of the constituent [mole/mole] as a function of temperature and pressure C(T,P)\nν: vector of wavenumber samples [cm^-1]\nΩ: AtmosphericDomain\nshape!: line shape to use, must be the in-place version (voigt!, lorentz!, etc.)\nΔνcut: profile truncation distance [cm^-1]\n\nVariableGas(par::String, C, ν, Ω, shape!=voigt!, Δνcut=25; kwargs...)\n\nSame arguments as the first constructor, but reads a par file directly into the gas object. Keyword arguments are passed through to readpar.\n\n\n\n\n\n","category":"type"},{"location":"gas_objects/#ClearSky.rawσ","page":"Gas Objects","title":"ClearSky.rawσ","text":"rawσ(g::AbstractGas, i, T, P)\n\nRetrieve the absorption cross-section at wavenumber index i, temperature T [K], and pressure P [Pa], without the concentration scaling.\n\n\n\n\n\nrawσ(g::AbstractGas, i, T, P)\n\nRetrieve the absorption cross-section for all wavenumbers at temperature T [K], and pressure P [Pa], without the concentration scaling.\n\n\n\n\n\n","category":"function"},{"location":"gas_objects/#ClearSky.concentration","page":"Gas Objects","title":"ClearSky.concentration","text":"concentration(g::WellMixedGas)\n\nFurnishes the molar concentration [mole/mole] of a WellMixedGas object. Identical to g.C.\n\n\n\n\n\nconcentration(g::VariableGas, T, P)\n\nFurnishes the molar concentration [mole/mole] of a VariableGas object at a particular temperature and pressure. Identical to g.C(T,P).\n\n\n\n\n\n","category":"function"},{"location":"gas_objects/#ClearSky.reconcentrate","page":"Gas Objects","title":"ClearSky.reconcentrate","text":"reconcentrate(g::WellMixedGas, C)\n\nCreate a copy of a WellMixedGas object with a different molar concentration, C [mole/mole].\n\nwarning: Warning\nOnly reconcentrate gas objects with very low concentrations. The self-broadening component of the line shape is not recomputed when using the reconcentrate function. This component is generally small when the partial pressure is low, but may be appreciable for bulk components.\n\n\n\n\n\nreconcentrate(g::VariableGas, C)\n\nCreate a copy of a VariableGas object with a new molar concentration function, C(T,P) [mole/mole].\n\nwarning: Warning\nThe self-broadening component of the line shape is not recomputed when using the reconcentrate function. This component is generally small when partial pressure is low, but may be appreciable if the concentration changes significantly.\n\n\n\n\n\n","category":"function"},{"location":"modeling/#Modeling","page":"Modeling","title":"Modeling","text":"","category":"section"},{"location":"modeling/","page":"Modeling","title":"Modeling","text":"opticaldepth\ntransmittance\noutgoing\ntopfluxes\nbottomfluxes\nGroupedAbsorber\nAcceleratedAbsorber\nupdate!","category":"page"},{"location":"modeling/#ClearSky.opticaldepth","page":"Modeling","title":"ClearSky.opticaldepth","text":"opticaldepth(P₁, P₂, g, fT, fμ, θ, absorbers...; tol=1e-5)\n\nCompute monochromatic optical depths (tau) between two pressure levels\n\nArguments\n\nP₁: first pressure level [Pa]\nP₂: second pressure level [Pa]\ng: gravitational acceleration [m/s^2]\nfT: temperature [K] as a function of pressure [Pa], fT(P). This may be any callable object, like MoistAdiabat, for example.\nfμ: mean molar mass as a function of temperature [K] and pressure [Pa], fμ(T,P)\nθ: angle [radians] of path, must be ∈ [0,π/2), where 0 is straight up/down\nabsorbers: at least one gas object and any number of CIATables and functions in the form σ(ν, T, P)\n\nReturns a vector of optical depths across all wavenumbers stored in gas objects. The tol keyword argument adjusts integrator error tolerance.\n\n\n\n\n\n","category":"function"},{"location":"modeling/#ClearSky.transmittance","page":"Modeling","title":"ClearSky.transmittance","text":"transmittance(τ)\n\nEvaluate transmittance from optical depth, t = e^-τ\n\n\n\n\n\ntransmittance(P₁, P₂, g, fT, fμ, θ, absorbers...; tol=1e-5)\n\nCompute monochromatic transmittances. between two pressure levels\n\nAccepts the same arguments as opticaldepth and returns a vector of transmittances across all wavenumbers stored in gas objects.\n\n\n\n\n\n","category":"function"},{"location":"modeling/#ClearSky.outgoing","page":"Modeling","title":"ClearSky.outgoing","text":"outgoing(Pₛ, g, fT, fμ, absorbers; Pₜ=1.0, nstream=5, tol=1e-5)\n\nCompute outgoing monochromatic radiative fluxes [W/m^2/cm^-1], line-by-line. Integrates the schwarzschild equation from Pₛ to Pₜ at each wavenumber in the provided gas object(s) using any number of streams/angles. Total flux [W/m^2] can be evaluated with the trapz function. This function does not include reflected stellar radiation, which is accounted for in topfluxes and topimbalance\n\nArguments\n\nPₛ: surface pressure [Pa]\ng: gravitational acceleration [m/s^2]\nfT: temperature [K] as a function of pressure [Pa], fT(P). This may be any callable object, like MoistAdiabat, for example.\nfμ: mean molar mass as a function of temperature [K] and pressure [Pa], fμ(T,P)\nabsorbers: at least one gas object and any number of CIATables and functions in the form σ(ν, T, P)\n\nKeywords\n\nPₜ: top of atmopshere pressure [Pa]\nnstream: the number of atmospheric streams (radiation angles) to calculate and integrate\ntol: integrator error tolerance\n\nThe keyword argument nstream specifies how many independent streams, or beam angles through the atmosphere, to integrate. The keyword argument tol is a numerical error tolerance passed to the radau integrator.\n\n\n\n\n\n","category":"function"},{"location":"modeling/#ClearSky.GroupedAbsorber","page":"Modeling","title":"ClearSky.GroupedAbsorber","text":"GroupedAbsorber(absorbers...)\n\nA struct for consolidating absorbers. Construct with any number of gas objects, functions in the form σ(ν, T, P) and CIATables.\n\n\n\n\n\n","category":"type"},{"location":"modeling/#ClearSky.AcceleratedAbsorber","page":"Modeling","title":"ClearSky.AcceleratedAbsorber","text":"AcceleratedAbsorber(P, T, G::GroupedAbsorber)\nAcceleratedAbsorber(P, T, absorbers...)\n\nAn accelerated struct for getting cross-sections from groups of absorbers. Pressure and temperature coordinates must be provided. \n\n\n\n\n\n","category":"type"},{"location":"modeling/#ClearSky.update!","page":"Modeling","title":"ClearSky.update!","text":"update!(A::AcceleratedAbsorber, T::Vector{Float64})\n\nUpdate the cross-section interpolators underlyig an AcceleratedAbsorber with a new set of temperatures. The new temperatures should correspond to the pressure levels used when originally constructing the AcceleratedAbsorber.  \n\n\n\n\n\n","category":"function"},{"location":"absorption_data/#Absorption-Data","page":"Absorption Data","title":"Absorption Data","text":"","category":"section"},{"location":"absorption_data/#Spectral-Lines","page":"Absorption Data","title":"Spectral Lines","text":"","category":"section"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"The model is designed to use the HITRAN database of spectral line data for various atmospheric gases. To download line data, you must register for a free account then search for lines. It's generally best to download all lines for a single gas into a single file, which will have a .par extension. These are text files in fixed-width format and they can be read by functions in ClearSky.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"To work with spectral line data directly, use the readpar function to load the data. This function simply parses the fixed-width file into a dictionary of vectors with the appropriate data types. For more information, see the readpar documentation.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"If you want to compute line shapes, read par files into SpectralLines objects. The constructor reads files using readpar then does some rearranging for fast line shape calculations. Unnecessary information is dropped and the molecule name, formula, and molar masses are assigned. To compute line shapes, see Line Shapes.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"For only high-level calculations, par files can also be loaded directly into gas objects.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"readpar\nSpectralLines","category":"page"},{"location":"absorption_data/#ClearSky.readpar","page":"Absorption Data","title":"ClearSky.readpar","text":"readpar(filename; νmin=0, νmax=Inf, Scut=0, I=[], maxlines=-1)\n\nRead an absoption line file from the HITRAN database, which should have the \".par\" extension. These files are available at https://hitran.org/lbl after registering for a free account.\n\nKeyword Arguments\n\nνmin: smallest line wavenumber to include\nνmax: largest line wavenumber to include\nScut: smallest spectral line intensity\nI: array of isotopologue numbers to include (excludes all others)\nmaxlines: maximum number of lines to include (includes only the most intense maxlines lines)\n\nA dictionary of vectors is returned, reflecting the definitions from\n\nHITRAN website\nRothman, Laurence S., et al. \"The HITRAN 2004 molecular spectroscopic database.\" Journal of quantitative spectroscopy and radiative transfer 96.2 (2005): 139-204.\n\nKey Vector Type Description\nM Int16 HITRAN molecular identification number\nI Char HITRAN isotopologue identification symbol\nν Float64 spectral line wavenumber [cm^-1] in a vacuum\nS Float64 spectral line intensity [cm^-1/(moleculecdotcm^-2)] at 296 K\nA Float64 Einstein-A coefficient (s^-1) of a transition\nγa Float64 air-broadened half width at half maximum (HWHM) [cm^-1/atm] at 296 K and 1 atm\nγs Float64 self-broadened half width at half maximum (HWHM) [cm^-1/atm] at 296 K and 1 atm\nEpp Float64 lower-state energy of the transition [cm^-1]\nna Float64 coefficient of temperature dependence of air-broadened half width\nδa Float64 pressure shift [cm^-1/atm] at 296 K and 1 atm of the line position with respect to vacuum transition wavenumber\nVp String upper-state \"global\" quanta\nVpp String lower-state \"global\" quanta\nQp String upper-state \"local\" quanta\nQpp String lower-state \"local\" quanta\nIerr String uncertainty indices\nIref String reference indices\n* Char flag (?)\ngp String statistical weight of upper state\ngpp String statistical weight of lower state\n\n\n\n\n\n","category":"function"},{"location":"absorption_data/#ClearSky.SpectralLines","page":"Absorption Data","title":"ClearSky.SpectralLines","text":"Organizing type for spectral line data of a single gas\n\nField Type Description\nname String gas name\nformula String gas formula\nN Int64 number of lines\nM Int16 see readpar\nI Vector{Int16} see readpar\nμ Vector{Float64} molar mass of isotopologues [kg/mole]\nA Vector{Float64} isotopologue abundance (Earth)\nν Vector{Float64} see readpar\nS Vector{Float64} see readpar\nγa Vector{Float64} see readpar\nγs Vector{Float64} see readpar\nEpp Vector{Float64} see readpar\nna Vector{Float64} see readpar\n\nConstructors\n\nSpectralLines(par::Dict)\n\nConstruct a SpectralLines object from a dictionary of line data. That dictionary can be created with readpar.\n\nSpectralLines(filename, νmin=0, νmax=Inf, Scut=0, I=[], maxlines=-1)\n\nRead a .par file directly into a SpectralLines object. Keyword arguments are passed through to readpar.\n\n\n\n\n\n","category":"type"},{"location":"absorption_data/#Collision-Induced-Absorption-(CIA)","page":"Absorption Data","title":"Collision Induced Absorption (CIA)","text":"","category":"section"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"The model also makes it easy to include CIA data from HITRAN. These files can be  downloaded directly or all at once using the download_cia.py script. Each file contains potentially many tables of absorption data at different wavenumbers and temperatures.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"Like the line data, there is a function for reading these CIA files without doing anything else. The readcia function reads a cia file into a vector of dictionaries. Each dictionary represents a table of absorption data. This is the raw data, but it is relatively hard to work with.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"A CIATables object arranges each table of absorption data into an interpolator and makes it easy to compute the CIA absorption coefficient at any wavenumber and temperature.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"A CIA struct links a CIATables object with the gasses that are inducing absorption. Because concentrations are defined in the gas objects, CIA objects can be used to compute induced absorption cross-sections using only the wavenumber, temperature, and pressure values.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"The cia function also provides a number of methods for computing induced cross-sections.","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"","category":"page"},{"location":"absorption_data/","page":"Absorption Data","title":"Absorption Data","text":"readcia\nCIATables\nCIA\ncia\ncia!","category":"page"},{"location":"absorption_data/#ClearSky.readcia","page":"Absorption Data","title":"ClearSky.readcia","text":"readcia(filename)\n\nRead a collision induced absorption data file. These files are available from HITRAN and desribed by this readme. A vector of dictionaries is returned. Each dictionary represents absorption coefficients for a single temperature over a range of wavenumbers. Each dictionary contains:\n\nKey Type Description\nsymbol String chemical symbol\nνmin Float64 minimum wavenumber of absorption range [cm^-1]\nνmax Float64 maximum wavenumber of absorption range [cm^-1]\nnpts Int64 number of points\nT Float64 temperature for absorption data [K]\nν Vector{Float64} wavenumber samples [cm^-1]\nk Vector{Float64} absorption coefficients [cm^5/molecule^2]\nmaxcia Float64 maximum absorption coefficient [cm^5/molecule^2]\nres Float64 ?\ncomments String miscelleneous comments\nreference Int64 indices of data references\n\n\n\n\n\n","category":"function"},{"location":"absorption_data/#ClearSky.CIATables","page":"Absorption Data","title":"ClearSky.CIATables","text":"Organizing type for collision induced absorption data, with data tables loaded into interpolators.\n\nField Type Description\nname String molecular symbol, i.e. \"CO2-H2\"\nformulae Tuple{String,String} split molecular formulae, i.e (\"CO2\", \"H2\")\nΦ Vector{BilinearInterpolator} interpolators for each grid of absorption coefficients\nϕ Vector{LinearInterpolator} interpolators for isolated ranges of absorption coefficients\nT Vector{Float64} temperatures [K] for single ranges in ϕ\nextrapolate Bool whether to extrapolate using flat boundaries from the coefficient grids in Φ\nsingles Bool whether to use the single ranges in ϕ at all\n\nThe interpolator objects are described in the BasicInterpolators.jl documentation.\n\nConstructors\n\nCIATables(cia::Vector{Dict}; extrapolate=false, singles=false, verbose=true)\n\nConstruct a CIATables object from a dictionary of coefficient data, which can be read from files using readcia. Keywords extrapolate and singles are used to set those fields of the returned object.\n\nCIATables(filename; extrapolate=false, singles=false, verbose=true)\n\nConstruct a CIATables object directly from file, using readcia along the way.\n\nExamples\n\nA CIATables object is function-like. To retrieve the absorption coefficient at a given wavenumber [cm^-1] and temperature [K], use the object like a function.\n\nco2co2 = CIATables(\"data/cia/CO2-CO2_2018.cia\"); #read data\nν = 100; #wavenumber [cm^-1]\nT = 288; #temperature [K]\nk = co2co2(ν, T) #absorption coefficient [cm^5/molecule^2]\n\nThe object interpolates and sums all data tables that contain ν and T. If extrapolate is true, boundary values are included whenever the temperature is out of range. If singles is true, data ranges for a single temperature are included whenever they contain ν.\n\nA CIATables can be passed to the cia function to compute an absorption cross-section with different temperatures and pressures.\n\nco2ch4 = CIATables(\"data/cia/CO2-CH4_2018.cia\"); #read data\nν = 250; #wavenumber [cm^-1]\nT = 310 #temperature [K]\nPair = 1e5; #air pressure [Pa]\nPco2 = 40; #CO2 partial pressure [Pa]\nPch4 = 0.1; #CH4 partial pressure [Pa]\nσ = cia(ν, co2ch4, T, Pair, Pco2, Pch4) #absorption cross-section [cm^2/molecule]\n\n\n\n\n\n","category":"type"},{"location":"absorption_data/#ClearSky.CIA","page":"Absorption Data","title":"ClearSky.CIA","text":"Container for a CIATables object and the two gasses representing the CIA components. Specializes with the type of each gas for fast retreival of absorption cross-sections from CIA data and partial pressures.\n\nField Type Description\nname String molecular symbol, i.e. \"CO2-H2\"\nformulae Tuple{String,String} split molecular formulae, i.e (\"CO2\", \"H2\")\nx CIATables collision induced absorption tables\ng₁ <:AbstractGas first component of CIA pair\ng₁ <:AbstractGas second component of CIA pair\n\nConstructors\n\nCIA(ciatables::CIATables, g₁::AbstractGas, g₂::AbstractGas)\n\nThe name and formulae are taken from ciatables.\n\nCIA(ciatables::CIATables, gases::Tuple)\n\nUsing the formulae in ciatables, the correct pair of gases is automatically selected from a VarArg collection of gases.\n\nExample\n\nA CIA object is function-like. Use it like a function, passing it wavenumber, temperature, and pressure arguments to compute an absorption cross-section. Underneath, the CIATables object is interpolated and partial pressures are computed using the concentrations stored with the gases.\n\n#load gases\nν = LinRange(1, 2500, 2500);\nΩ = AtmosphericDomain();\nco2 = BulkGas(\"data/par/CO2.par\", 0.96, ν, Ω);\nch4 = MinorGas(\"data/par/CH4.par\", 1e-6, ν, Ω);\n\n#create CIA object\nco2ch4 = CIA(CIATables(\"data/cia/CO2-CH4_2018.cia\"), co2, ch4);\n\n#compute a cross-section\nν = 667;\nT = 250;\nP = 1e5;\nσ = co2ch4(ν, T, P)\n\n\n\n\n\n","category":"type"},{"location":"absorption_data/#ClearSky.cia","page":"Absorption Data","title":"ClearSky.cia","text":"cia(k, T, Pₐ, P₁, P₂)\n\nCompute a collision induced absorption cross-section\n\nArguments\n\nk: absorption coefficient [cm^5/molecule^2]\nT: temperature [K]\nPₐ: total air pressure [Pa]\nP₁: partial pressure of first gas [Pa]\nP₂: partial pressure of second gas [Pa]\n\n\n\n\n\ncia(ν, x::CIATables, T, Pₐ, P₁, P₂)\n\nCompute a collision induced absorption cross-section after retrieving the total absorption coefficient from a CIATables object\n\nArguments\n\nν: wavenumber [cm^-1]\nx: CIATables object\nT: temperature [K]\nPₐ: total air pressure [Pa]\nP₁: partial pressure of first gas [Pa]\nP₂: partial pressure of second gas [Pa]\n\n\n\n\n\ncia(ν::AbstractVector, x::CIATables, T, Pₐ, P₁, P₂)\n\nCompute a vector of collision induced absorption cross-sections, retrieving the total absorption coefficient from a CIATables object.\n\nArguments\n\nν: vector of wavenumbers [cm^-1]\nx: CIATables object\nT: temperature [K]\nPₐ: total air pressure [Pa]\nP₁: partial pressure of first gas [Pa]\nP₂: partial pressure of second gas [Pa]\n\n\n\n\n\ncia(ν, x::CIATables, T, Pₐ, g₁::AbstractGas, g₂::AbstractGas)\n\nCompute a collision induced absorption cross-section, retrieving the total absorption coefficient from a CIATables object and computing partial pressures from gas objects.\n\nArguments\n\nν: vector of wavenumbers [cm^-1]\nx: CIATables object\nT: temperature [K]\nPₐ: total air pressure [Pa]\ng₁: gas object representing the first component of the CIA pair\ng₂: gas object representing the second component of the CIA pair\n\n\n\n\n\n","category":"function"},{"location":"absorption_data/#ClearSky.cia!","page":"Absorption Data","title":"ClearSky.cia!","text":"cia!(σ::AbstractVector, ν::AbstractVector, x::CIATables, T, Pₐ, P₁, P₂)\n\nCompute a vector of collision induced absorption cross-sections in-place, retrieving the total absorption coefficient from a CIATables object.\n\nArguments\n\nσ: vector to store computed cross-sections\nν: vector of wavenumbers [cm^-1]\nx: CIATables object\nT: temperature [K]\nPₐ: total air pressure [Pa]\nP₁: partial pressure of first gas [Pa]\nP₂: partial pressure of second gas [Pa]\n\n\n\n\n\n","category":"function"},{"location":"#ClearSky","page":"Home","title":"ClearSky","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for ClearSky, a line-by-line radiative transfer model written entirely in Julia. The code is designed to make one-dimensional, clear-sky calculations easy and interactive without sacrificing accuracy and speed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reading Absorption Data\nComputing Line Shapes\nGas Objects\nAtmospheric Profiles\nRadiation\nModeling\nOrbits and Insolation","category":"page"},{"location":"atmospheric_profiles/#Atmospheric-Profiles","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"","category":"section"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"ClearSky contains functions for common atmospheric profiles and quantities.","category":"page"},{"location":"atmospheric_profiles/#Temperature-Profiles","page":"Atmospheric Profiles","title":"Temperature Profiles","text":"","category":"section"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"Many radiative transfer calculations require an atmospheric temperature profile. ClearSky is designed to work with any arbitrary temperature profile if it can be defined as a function of pressure, T(P).","category":"page"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"For convenience, dry and moist adiabatic profiles are available through the DryAdiabat and MoistAdiabat types, which are function-like types. There is also a tropopause function.","category":"page"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"DryAdiabat\nMoistAdiabat\ntropopause","category":"page"},{"location":"atmospheric_profiles/#ClearSky.DryAdiabat","page":"Atmospheric Profiles","title":"ClearSky.DryAdiabat","text":"Function-like type for initializing and evaluating a dry adiabatic temperature profile. Optionally, a uniform upper atmospheric temperature can be set below a specified temperature or pressure.\n\nConstructor\n\nDryAdiabat(Tₛ, Pₛ, cₚ, μ; Tstrat=0.0, Ptropo=0.0, Pₜ=1.0e-9)\n\nTₛ: surface temperature [K]\nPₛ: surface pressure [K]\ncₚ: specific heat of the atmosphere [J/kg/K]\nμ: molar mass of the atmosphere [kg/mole]\n\nIf Tstrat is greater than zero, the temperature profile will never drop below that temperature. If Ptropo is greater than zero, the temperature profile at pressures lower than Ptropo will be equal to the temperature at exactly Ptropo. Tstrat and Ptropo cannot both greater than zero.\n\nPₜ defines the highest pressure [Pa] in the temperature profile. If should generally be small but cannot be zero.\n\nExample\n\nOnce constructed, use a DryAdiabat like a function to compute temperature at a given pressure.\n\nTₛ = 288; #surface temperature [K]\nPₛ = 1e5; #surface pressure [Pa]\ncₚ = 1040; #specific heat of air [J/kg/K]\nμ = 0.029; #molar mass of air [kg/mole]\n\n#construct the dry adiabat with an upper atmosphere temperature of 190 K\nD = DryAdiabat(Tₛ, Pₛ, cₚ, μ, Tstrat=190);\n\n#temperatures at 40-10 kPa\nD.([4e4, 3e4, 2e4, 1e4])\n\n\n\n\n\n","category":"type"},{"location":"atmospheric_profiles/#ClearSky.MoistAdiabat","page":"Atmospheric Profiles","title":"ClearSky.MoistAdiabat","text":"Function-like type for initializing and evaluating a moist adiabatic temperature profile. Optional uniform upper atmospheric temperature below a specified temperature or pressure.\n\nConstructor\n\nMoistAdiabat(Tₛ, Pₛ, cₚₙ, cₚᵥ, μₙ, μᵥ, L, psat; Tstrat=0, Ptropo=0, N=1000, Pₜ=1.0e-9)\n\nTₛ: surface temperature [K]\nPₛ: surface pressure [K]\ncₚₙ: specific heat of the non-condensible atmospheric component (air) [J/kg/K]\ncₚᵥ: specific heat of the condensible atmospheric component [J/kg/K]\nμₙ: molar mass of the non-condensible atmospheric component (air) [kg/mole]\nμᵥ: molar mass of the condensible atmospheric component [kg/mole]\nL: condsible component's latent heat of vaporization [J/kg]\npsat: function defining the saturation vapor pressure for a given temperature, psat(T)\n\nIf Tstrat is greater than zero, the temperature profile will never drop below that temperature. If Ptropo is greater than zero, the temperature profile at pressures lower than Ptropo will be equal to the temperature at exactly Ptropo. Tstrat and Ptropo cannot both greater than zero.\n\nPₜ defines the highest pressure [Pa] in the temperature profile. If should generally be small but cannot be zero.\n\nThe profile is evaluated along a number of pressure values in the atmosphere set by N. Those points are then used to construct a cubic spline interpolator for efficient and accurate temperature calculation. Experience indicates that 1000 points is very accurate and also fast.\n\nExample\n\nOnce constructed, use a MoistAdiabat like a function to compute temperature at a given pressure.\n\nTₛ = 288; #surface temperature [K]\nPₛ = 1e5; #surface pressure [Pa]\ncₚₙ = 1040; #specific heat of air [J/kg/K]\ncₚᵥ = 1996; #specific heat of H2O [J/kg/K]\nμₙ = 0.029; #molar mass of air [kg/mole]\nμᵥ = 0.018; #molar mass of H2O [kg/mole]\nL = 2.3e6; #H2O latent heat of vaporization [J/kg]\n\n#a saturation vapor pressure function for H2O is built in\npsat = psatH2O;\n\n#construct the moist adiabat with a tropopause pressure of 1e4 Pa\nM = MoistAdiabat(Tₛ, Pₛ, cₚₙ, cₚᵥ, μₙ, μᵥ, L, psat, Ptropo=1e4);\n\n#temperatures at 30-5 kPa\nM.([3e4, 2e4, 1e4, 5e3])\n\n\n\n\n\n","category":"type"},{"location":"atmospheric_profiles/#ClearSky.tropopause","page":"Atmospheric Profiles","title":"ClearSky.tropopause","text":"tropopause(Γ::AbstractAdiabat)\n\nCompute the temperature [K] and pressure [Pa] at which the tropopause occurs in an adiabatic temperature profile. This function can be called on a DryAdiabat or a MoistAdiabat if it was constructed with nonzero Tstrat or Ptropo. Returns the tuple (T,P).\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#Pressure-Profiles","page":"Atmospheric Profiles","title":"Pressure Profiles","text":"","category":"section"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"In case a pressure profile with constant scale height isn't sufficient, hydrostatic profiles with arbitrary temperature and mean molar mass functions are available through the Hydrostatic type and related functions.","category":"page"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"Hydrostatic\nhydrostatic\nscaleheight\naltitude","category":"page"},{"location":"atmospheric_profiles/#ClearSky.Hydrostatic","page":"Atmospheric Profiles","title":"ClearSky.Hydrostatic","text":"Function-like type for initializing and evaluating a hydrostatic pressure profile with arbitrary temperature and mean molar mass profiles. A Hydrostatic object maps altitude to pressure. A pressure vs altitude profile is generated and used for interpolation.\n\nConstructor\n\nHydrostatic(Pₛ, Pₜ, g, fT, fμ, N=1000)\n\nPₛ: surface pressure [Pa]\nPₜ: top of profile pressure [Pa]\ng: gravitational acceleration [m/s^2]\nfT: temperature [K] as a function of presssure, fT(P)\nfμ: mean molar mass [kg/mole] as a function of temperature and pressure, fμ(T,P)\nN: optional, number of interpolation nodes\n\nFor a constant molar mass or temperature, you can use anonymous functions directly. For example, to construct a hydrostatic pressure profile for a crude Earth-like atmosphere:\n\n#moist adiabatic temperature profile\nM = MoistAdiabat(288, 1e5, 1040, 1996, 0.029, 0.018, 2.3e6, psatH2O, Ptropo=1e4);\n#hydrostatic pressure profile with constant mean molar mass\nH = Hydrostatic(1e5, 1, 9.8, M, (T,P)->0.029);\n#evaluate pressures at a few different altitudes\nH.([0, 1e3, 1e4])\n\n\n\n\n\n","category":"type"},{"location":"atmospheric_profiles/#ClearSky.hydrostatic","page":"Atmospheric Profiles","title":"ClearSky.hydrostatic","text":"hydrostatic(z, Pₛ, g, fT, fμ)\n\nCompute the hydrostatic pressure [Pa] at a specific altitude using arbitrary atmospheric profiles of temperature and mean molar mass. This function integrates the hydrostatic relation,\n\n``\\frac{dP}{dz} = \\frac{\\mu g}{R T}\n\nfrom the surface to a height of z, where R is the universial gas constant.\n\nArguments\n\nz: altitude [m] to compute pressure at\nPₛ: surface pressure [Pa]\ng: gravitational acceleration [m/s^2]\nfT: temperature [K] as a function of pressure, fT(P)\nfμ: mean molar mass [kg/mole] as a function of pressure and temperature fμ(T,P)\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.scaleheight","page":"Atmospheric Profiles","title":"ClearSky.scaleheight","text":"scaleheight(g, μ, T)\n\nEvaluate the atmospheric scale height,\n\nfracRTμg\n\nwhere R is the universial gas constant.\n\nArguments\n\ng: gravitational acceleration [m/s^s]\nμ: mean molar mass [kg/mole]\nT: temperature [K]\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.altitude","page":"Atmospheric Profiles","title":"ClearSky.altitude","text":"altitude(P, Pₛ, g, fT, fμ)\n\nCompute the altitude [m] at which a specific hydrostatic pressure occurs using arbitrary atmospheric profiles of temperature and mean molar mass. This function applies a root finder to the hydrostatic function.\n\nArguments\n\nP: pressure [Pa] to compute altitude at\nPₛ: surface pressure [Pa]\ng: gravitational acceleration [m/s^2]\nfT: temperature [K] as a function of pressure, fT(P)\nfμ: mean molar mass [kg/mole] as a function of pressure and temperature fμ(T,P)\n\n\n\n\n\naltitude(H::Hydrostatic, P)\n\nCompute the altitude at which a specific pressure occurs in a Hydrostatic pressure profile. A root finder is applied to the object.\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#Other-Functions","page":"Atmospheric Profiles","title":"Other Functions","text":"","category":"section"},{"location":"atmospheric_profiles/","page":"Atmospheric Profiles","title":"Atmospheric Profiles","text":"psatH2O\ntsatCO2\nozonelayer\ncondensibleprofile\nhaircut!\nrayleighCO2","category":"page"},{"location":"atmospheric_profiles/#ClearSky.psatH2O","page":"Atmospheric Profiles","title":"ClearSky.psatH2O","text":"psatH2O(T)\n\nCompute the saturation partial pressure of water vapor at a given temperature using expressions from\n\nMurphy, D. M. & Koop, T. Review of the vapour pressures of ice and supercooled water for atmospheric applications. Q. J. R. Meteorol. Soc. 131, 1539–1565 (2005).\n\nThis function uses equation 10 in the paper above when T = 27315 K and equation 7 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.tsatCO2","page":"Atmospheric Profiles","title":"ClearSky.tsatCO2","text":"tsatCO2(P)\n\nCompute the saturation pressure of carbon dioxide at a certain pressure using equation 19 from\n\nFanale, F. P., Salvail, J. R., Bruce Banerdt, W. & Steven Saunders, R. Mars: The regolith-atmosphere-cap system and climate change. Icarus 50, 381–407 (1982)\n\nThe equation is inverted to express temperature as a function of pressure.\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.ozonelayer","page":"Atmospheric Profiles","title":"ClearSky.ozonelayer","text":"ozonelayer(P, Cmax=8e-6)\n\nApproximate the molar concentration of ozone in Earth's ozone layer using an 8 ppm peak at 1600 Pa which falls to zero at 100 Pa and 25500 Pa. Peak concentration is defined by Cmax. This approximation is discussed in\n\nJacob, D. Introduction to Atmospheric Chemistry. (Princeton University Press, 1999).\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.condensibleprofile","page":"Atmospheric Profiles","title":"ClearSky.condensibleprofile","text":"condensibleprofile(Γ::AbstractAdiabat, psat)\n\nCreate a new function determining the temperature dependent concentration of a condensible gas that has a uniform stratospheric concentration. The new function references an existing adiabatic profile and a function for the partial pressure ppartial(T).\n\n\n\n\n\ncondensibleprofile(G::VariableGas, Γ::AbstractAdiabat, ppartial)\n\nCreate a new function determining the temperature dependent concentration of a condensible gas that has a uniform stratospheric concentration. Then use that function to reconcentrate a VariableGas.\n\n\n\n\n\n","category":"function"},{"location":"atmospheric_profiles/#ClearSky.haircut!","page":"Atmospheric Profiles","title":"ClearSky.haircut!","text":"haircut!(T, P, tsat)\n\nPut a temperature floor on a temperature profile using the saturation temperature function tsat(P).\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#Line-Shapes","page":"Line Shapes","title":"Line Shapes","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Line shapes are computed following the definitions and equations in HITRAN (and elsewhere).","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"In ClearSky, line shapes can be computed from SpectralLines objects and built in shape functions. The following shape functions are implemented with the necessary supporting functions:","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"voigt\nlorentz, pressure-broadening\ndoppler\nPHCO2, the Perrin & Hartman sublorentzian shape for carbon dioxide","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Each of these functions has three methods for computing cross-sections:","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"at a single wavenumber, temperature, and pressure\nover a sorted vector of wavenumbers, a single temperature, and a single pressure\nthe same as item 2, but computing cross-sections in-place","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Using multiple dispatch, the arguments supplied to the functions determine the behavior. For example, calling the voigt function with a single number for the ν argument executes the function for a single cross-section. Calling the same function with a vector of wavenumbers in the ν argument executes the version of the function optimized for that scenario.","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Another way to get cross-sections is through gas objects, which are used for higher-level modeling.","category":"page"},{"location":"line_shapes/#A-Note-on-Handling-TIPS","page":"Line Shapes","title":"A Note on Handling TIPS","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Evaluating line shapes requires evaluating the temperature dependence of line intensities. To compute this scaling, the ratio of total internal partition functions (TIPS),","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"Q(T_ref)Q(T)","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"must be evaluated. The necessary information is provided by HITRAN for every isotopologue and computing the ratio requires interpolating a range of Q(T) values for the appropriate temperature.","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"ClearSky evaluates the ratio accurately and automatically inside the scaleintensity function.","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"To facilitate this, the molparam.py script was used to download Q data for each isotopologue, generate high-accuracy interpolating Chebyshev polynomials for each one, and write the information to a Julia source file called molparam.jl. The pre-computed interpolating coefficients are defined directly in source code, allowing rapid and accurate evaluation of the TIPS ratio. The interpolating functions are guaranteed to reproduce the provided data with less than 1 % error between 25 and 1000 K.","category":"page"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"","category":"page"},{"location":"line_shapes/#Voigt-Profile","page":"Line Shapes","title":"Voigt Profile","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"fvoigt\nvoigt\nvoigt!","category":"page"},{"location":"line_shapes/#ClearSky.fvoigt","page":"Line Shapes","title":"ClearSky.fvoigt","text":"fvoigt(ν, νl, α, γ)\n\nEvaluate Voigt profile\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nα: doppler (gaussian) broadening coefficient\nγ: lorentzian broadening coefficient\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.voigt","page":"Line Shapes","title":"ClearSky.voigt","text":"voigt(ν, νl, S, α, γ)\n\nEvaluate Voigt absoption cross-section [cm^2/molecule]\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nS: line absoption intensity [cm^-1/(moleculecdotcm^-2)]\nα: doppler (gaussian) broadening coefficient\nγ: lorentzian broadening coefficient\n\n\n\n\n\nvoigt(ν, sl::SpectralLines, T, P, Pₚ, Δνcut=25)\n\nEvaluate Voigt absorption cross-section at a single wavenumber.\n\n\n\n\n\nvoigt(ν, sl, T, P, Pₚ, Δνcut=25)\n\nCompute a vector of Voigt absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and Voigt profiles are evaluated along the way.\n\nArguments\n\nν: vector of wavenumbers indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.voigt!","page":"Line Shapes","title":"ClearSky.voigt!","text":"voigt!(σ, ν, sl, T, P, Pₚ, Δνcut=25)\n\nIdentical to voigt, but fills the vector of cross-sections (σ) in-place.\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"","category":"page"},{"location":"line_shapes/#Lorentz-Profile","page":"Line Shapes","title":"Lorentz Profile","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"γlorentz\nflorentz\nlorentz\nlorentz!","category":"page"},{"location":"line_shapes/#ClearSky.γlorentz","page":"Line Shapes","title":"ClearSky.γlorentz","text":"γlorentz(γa, γs, na, T, P, Pₚ)\n\nCompute lorentzian broadening coefficient\n\nArguments\n\nγa: air-broadened half width at half maximum (HWHM) [cm^-1/atm] at 296 K and 1 atm\nγs: self-broadened half width at half maximum (HWHM) [cm^-1/atm] at 296 K and 1 atm\nna: coefficient of temperature dependence of air-broadened half width\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.florentz","page":"Line Shapes","title":"ClearSky.florentz","text":"florentz(ν, νl, γ)\n\nEvaluate lorentz profile\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nγ: lorentzian broadening coefficient\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.lorentz","page":"Line Shapes","title":"ClearSky.lorentz","text":"lorentz(ν, νl, S, γ)\n\nEvaluate lorentzian absoption cross-section [cm^2/molecule]\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nS: line absoption intensity [cm^-1/(moleculecdotcm^-2)]\nγ: lorentzian broadening coefficient\n\n\n\n\n\nlorentz(ν, sl, T, P, Pₚ, Δνcut=25)\n\nCompute a single lorentzian absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and lorentzian profiles are evaluated along the way.\n\nArguments\n\nν: single wavenumber indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\nlorentz(ν, sl, T, P, Pₚ, Δνcut=25)\n\nCompute a vector of lorentzian absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and lorentzian profiles are evaluated along the way.\n\nArguments\n\nν: vector of wavenumbers indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.lorentz!","page":"Line Shapes","title":"ClearSky.lorentz!","text":"lorentz!(σ, ν, sl, T, P, Pₚ, Δνcut=25)\n\nIdentical to lorentz, fills the vector of cross-sections (σ) in-place.\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"","category":"page"},{"location":"line_shapes/#Doppler-Profile","page":"Line Shapes","title":"Doppler Profile","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"αdoppler\nfdoppler\ndoppler\ndoppler!","category":"page"},{"location":"line_shapes/#ClearSky.αdoppler","page":"Line Shapes","title":"ClearSky.αdoppler","text":"αdoppler(νl, μ, T)\n\nCompute doppler (gaussian) broadening coefficient from line wavenumber νl [cm^-1], gas molar mass μ [kg/mole], and temperature T [K].\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.fdoppler","page":"Line Shapes","title":"ClearSky.fdoppler","text":"fdoppler(ν, νl, α)\n\nEvaluate doppler (gaussian) profile\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nα: doppler (gaussian) broadening coefficient\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.doppler","page":"Line Shapes","title":"ClearSky.doppler","text":"doppler(ν, νl, S, α)\n\nEvaluate doppler (gaussian) absoption cross-section [cm^2/molecule]\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nS: line absoption intensity [cm^-1/(moleculecdotcm^-2)]\nα: doppler (gaussian) broadening coefficient\n\n\n\n\n\ndoppler(ν, sl, T, P, Pₚ, Δνcut=25)\n\nEvaluate a single doppler (gaussian) absoption cross-section [cm^2/molecule]. Temperature scaling and doppler profiles are evaluated along the way.\n\nArguments\n\nν: wavenumber indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\ndoppler(ν, sl, T, P, Pₚ, Δνcut=25)\n\nCompute a vector of doppler (gaussian) absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and doppler profiles are evaluated along the way.\n\nArguments\n\nν: vector of wavenumbers indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.doppler!","page":"Line Shapes","title":"ClearSky.doppler!","text":"doppler!(σ, ν, sl, T, P, Pₚ, Δνcut=25)\n\nIdentical to doppler, but fills the vector of cross-sections (σ) in-place.\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"","category":"page"},{"location":"line_shapes/#Perrin-and-Hartman-Sublorentzian-CO2-Profile","page":"Line Shapes","title":"Perrin & Hartman Sublorentzian CO2 Profile","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"ΧPHCO2\nPHCO2\nPHCO2!","category":"page"},{"location":"line_shapes/#ClearSky.ΧPHCO2","page":"Line Shapes","title":"ClearSky.ΧPHCO2","text":"ΧPHCO2(ν, νl, T)\n\nCompute the Χ (Chi) factor for sub-lorentzian CO2 line profiles, as in\n\nPerrin, M. Y., and J. M. Hartman. “Temperature-Dependent Measurements and Modeling of Absorption by CO2-N2 Mixtures in the Far Line-Wings of the 4.3 Μm CO2 Band.” Journal of Quantitative Spectroscopy and Radiative Transfer, vol. 42, no. 4, 1989, pp. 311–17.\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nT: temperature [K]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.PHCO2","page":"Line Shapes","title":"ClearSky.PHCO2","text":"PHCO2(ν, νl, S, α)\n\nEvaluate Perrin & Hartman sub-lorentzian absoption cross-section [cm^2/molecule] for CO2\n\nArguments\n\nν: profile evaluation wavenumber [cm^-1]\nνl: wavenumber of absorption line [cm^-1]\nT: temperature [K]\nS: line absoption intensity [cm^-1/(moleculecdotcm^-2)]\nα: doppler (gaussian) broadening coefficient\nγ: lorentzian broadening coefficient\n\n\n\n\n\nPHCO2(ν, sl, T, P, Pₚ, Δνcut=500)\n\nCompute a single Perrin & Hartman sub-lorentzian CO2 absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and profiles are evaluated along the way.\n\nArguments\n\nν: single wavenumber indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\nPHCO2(ν, sl, T, P, Pₚ, Δνcut=500)\n\nCompute a vector of Perrin & Hartman sub-lorentzian CO2 absorption cross-sections [cm^2/molecule] from a SpectralLines object. Temperature scaling and profiles are evaluated along the way.\n\nArguments\n\nν: vector of wavenumbers indicating where to evaluate [cm^-1]\nsl: SpectralLines\nT: temperature [K]\nP: air pressure [Pa]\nPₚ: partial pressure [Pa]\nΔνcut: profile truncation distance [cm^-1]\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.PHCO2!","page":"Line Shapes","title":"ClearSky.PHCO2!","text":"PHCO2!(σ, ν, sl, T, P, Pₚ, Δνcut=500)\n\nIdentical to PHCO2, but fills the vector of cross-sections (σ) in-place.\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"","category":"page"},{"location":"line_shapes/#Other","page":"Line Shapes","title":"Other","text":"","category":"section"},{"location":"line_shapes/","page":"Line Shapes","title":"Line Shapes","text":"faddeyeva\nscaleintensity","category":"page"},{"location":"line_shapes/#ClearSky.Faddeyeva.faddeyeva","page":"Line Shapes","title":"ClearSky.Faddeyeva.faddeyeva","text":"faddeyeva(z::Complex)\n\nEvaluate the Faddeyeva function with a complex argument, returning a complex number.\n\n\n\n\n\nfaddeyeva(x::Real, y::Real)\n\nEvaluate only the real part of the Faddeyeva function from the complex argument x + iy\n\n\n\n\n\n","category":"function"},{"location":"line_shapes/#ClearSky.scaleintensity","page":"Line Shapes","title":"ClearSky.scaleintensity","text":"scaleintensity(S, νl, Epp, M, I, T)\n\nCompute the temperature scaling for line intensity.\n\nArguments\n\nS: spectal line intensity at 296 K [cm^-1/(moleculecdotcm^-2)]\nνl: wavenumber of line [cm^-1]\nEpp: lower-state energy of transition [cm^-1]\nM: HITRAN molecular identification number\nI: HITRAN local isotopologue number\nT: temperature [K]\n\n\n\n\n\n","category":"function"}]
}
